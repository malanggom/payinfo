{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nlet handlers = {\n  deleteRow: [],\n  search: [],\n  reset: [],\n  filterUpdate: [],\n  resetButtons: [],\n  registeredFilters: [] // 등록된 필터를 저장할 배열 추가\n};\nexport { handlers }; // handlers를 export\n\nexport default {\n  SearchResultEvent: {\n    add(eventType, handler) {\n      if (handlers[eventType]) {\n        handlers[eventType].push(handler);\n      }\n    },\n    deleteRowBtnClick() {\n      handlers.deleteRow.forEach(handler => handler()); // deleteRow 핸들러만 호출\n    },\n    fetchData(type, filter) {\n      handlers.search.forEach(handler => handler(type, filter));\n    },\n    resetFilter() {\n      handlers.reset.forEach(handler => handler()); // reset 핸들러만 호출\n      handlers.resetButtons.forEach(handler => handler()); // resetButtons 핸들러 호출\n    },\n    // resetButtons() {\n    //     handlers.resetButtons.forEach(handler => handler()); // resetButtons 핸들러 호출\n    // },\n    filterUpdate(KeyName, type, filter) {\n      // 등록된 필터 추가\n      handlers.registeredFilters.push({\n        KeyName,\n        type,\n        filter\n      });\n      handlers.filterUpdate.forEach(handler => handler(KeyName, type, filter));\n    },\n    getRegisteredFilters() {\n      return handlers.registeredFilters; // 등록된 필터 반환\n    },\n    removeFilter(KeyName, type, filter) {\n      // 필터 해제 로직 추가\n      handlers.registeredFilters = handlers.registeredFilters.filter(registeredFilter => !(registeredFilter.type === type && registeredFilter.filter === filter));\n      // 중복 호출 방지\n      if (handlers.filterUpdate.length > 0) {\n        handlers.filterUpdate.forEach(handler => handler(KeyName, type, filter));\n      }\n      // // 등록된 필터에서 제거하는 로직 추가 필요\n      // handlers.registeredFilters = handlers.registeredFilters.filter(registeredFilter =>\n      //     registeredFilter.type !== type || registeredFilter.filter !== filter\n      // );\n    }\n  }\n};","map":{"version":3,"names":["handlers","deleteRow","search","reset","filterUpdate","resetButtons","registeredFilters","SearchResultEvent","add","eventType","handler","push","deleteRowBtnClick","forEach","fetchData","type","filter","resetFilter","KeyName","getRegisteredFilters","removeFilter","registeredFilter","length"],"sources":["C:/Users/User/.intelij/payinfo/frontend/src/eventbus/eventbus.js"],"sourcesContent":["let handlers = {\r\n    deleteRow: [],\r\n    search: [],\r\n    reset: [],\r\n    filterUpdate: [],\r\n    resetButtons: [],\r\n    registeredFilters: [] // 등록된 필터를 저장할 배열 추가\r\n};\r\n\r\nexport { handlers }; // handlers를 export\r\n\r\nexport default {\r\n    SearchResultEvent: {\r\n        add(eventType, handler) {\r\n            if (handlers[eventType]) {\r\n                handlers[eventType].push(handler);\r\n            }\r\n        },\r\n        deleteRowBtnClick() {\r\n            handlers.deleteRow.forEach(handler => handler()); // deleteRow 핸들러만 호출\r\n        },\r\n        fetchData(type, filter) {\r\n            handlers.search.forEach(handler => handler(type, filter));\r\n        },\r\n        resetFilter(){\r\n            handlers.reset.forEach(handler => handler());// reset 핸들러만 호출\r\n            handlers.resetButtons.forEach(handler => handler()); // resetButtons 핸들러 호출\r\n        },\r\n        // resetButtons() {\r\n        //     handlers.resetButtons.forEach(handler => handler()); // resetButtons 핸들러 호출\r\n        // },\r\n        filterUpdate(KeyName, type, filter) {\r\n            // 등록된 필터 추가\r\n            handlers.registeredFilters.push({ KeyName, type, filter });\r\n            handlers.filterUpdate.forEach(handler => handler(KeyName, type, filter));\r\n        },\r\n        getRegisteredFilters() {\r\n            return handlers.registeredFilters; // 등록된 필터 반환\r\n        },\r\n        removeFilter(KeyName, type, filter) {\r\n            // 필터 해제 로직 추가\r\n            handlers.registeredFilters = handlers.registeredFilters.filter(registeredFilter =>\r\n                !(registeredFilter.type === type && registeredFilter.filter === filter)\r\n            );\r\n            // 중복 호출 방지\r\n            if (handlers.filterUpdate.length > 0) {\r\n                handlers.filterUpdate.forEach(handler => handler(KeyName, type, filter));\r\n            }\r\n            // // 등록된 필터에서 제거하는 로직 추가 필요\r\n            // handlers.registeredFilters = handlers.registeredFilters.filter(registeredFilter =>\r\n            //     registeredFilter.type !== type || registeredFilter.filter !== filter\r\n            // );\r\n        },\r\n    }\r\n}"],"mappings":";AAAA,IAAIA,QAAQ,GAAG;EACXC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,EAAE;EACVC,KAAK,EAAE,EAAE;EACTC,YAAY,EAAE,EAAE;EAChBC,YAAY,EAAE,EAAE;EAChBC,iBAAiB,EAAE,EAAE,CAAC;AAC1B,CAAC;AAED,SAASN,QAAQ,GAAG,CAAC;;AAErB,eAAe;EACXO,iBAAiB,EAAE;IACfC,GAAGA,CAACC,SAAS,EAAEC,OAAO,EAAE;MACpB,IAAIV,QAAQ,CAACS,SAAS,CAAC,EAAE;QACrBT,QAAQ,CAACS,SAAS,CAAC,CAACE,IAAI,CAACD,OAAO,CAAC;MACrC;IACJ,CAAC;IACDE,iBAAiBA,CAAA,EAAG;MAChBZ,QAAQ,CAACC,SAAS,CAACY,OAAO,CAACH,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IACDI,SAASA,CAACC,IAAI,EAAEC,MAAM,EAAE;MACpBhB,QAAQ,CAACE,MAAM,CAACW,OAAO,CAACH,OAAO,IAAIA,OAAO,CAACK,IAAI,EAAEC,MAAM,CAAC,CAAC;IAC7D,CAAC;IACDC,WAAWA,CAAA,EAAE;MACTjB,QAAQ,CAACG,KAAK,CAACU,OAAO,CAACH,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC,CAAC;MAC7CV,QAAQ,CAACK,YAAY,CAACQ,OAAO,CAACH,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IACD;IACA;IACA;IACAN,YAAYA,CAACc,OAAO,EAAEH,IAAI,EAAEC,MAAM,EAAE;MAChC;MACAhB,QAAQ,CAACM,iBAAiB,CAACK,IAAI,CAAC;QAAEO,OAAO;QAAEH,IAAI;QAAEC;MAAO,CAAC,CAAC;MAC1DhB,QAAQ,CAACI,YAAY,CAACS,OAAO,CAACH,OAAO,IAAIA,OAAO,CAACQ,OAAO,EAAEH,IAAI,EAAEC,MAAM,CAAC,CAAC;IAC5E,CAAC;IACDG,oBAAoBA,CAAA,EAAG;MACnB,OAAOnB,QAAQ,CAACM,iBAAiB,CAAC,CAAC;IACvC,CAAC;IACDc,YAAYA,CAACF,OAAO,EAAEH,IAAI,EAAEC,MAAM,EAAE;MAChC;MACAhB,QAAQ,CAACM,iBAAiB,GAAGN,QAAQ,CAACM,iBAAiB,CAACU,MAAM,CAACK,gBAAgB,IAC3E,EAAEA,gBAAgB,CAACN,IAAI,KAAKA,IAAI,IAAIM,gBAAgB,CAACL,MAAM,KAAKA,MAAM,CAC1E,CAAC;MACD;MACA,IAAIhB,QAAQ,CAACI,YAAY,CAACkB,MAAM,GAAG,CAAC,EAAE;QAClCtB,QAAQ,CAACI,YAAY,CAACS,OAAO,CAACH,OAAO,IAAIA,OAAO,CAACQ,OAAO,EAAEH,IAAI,EAAEC,MAAM,CAAC,CAAC;MAC5E;MACA;MACA;MACA;MACA;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}