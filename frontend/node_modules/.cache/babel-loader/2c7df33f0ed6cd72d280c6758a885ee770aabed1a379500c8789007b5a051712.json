{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport eventbus from '@/eventbus/eventbus';\nexport default {\n  __name: 'SearchFilterBtnComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const buttons = ref([]);\n\n    // 필터 타입에 대한 한글 매핑\n    const filterTypeMap = {\n      contains: '포함',\n      notContains: '포함하지 않음',\n      equals: '같음',\n      notEqual: '같지 않음',\n      startsWith: '시작하는',\n      endsWith: '끝나는'\n    };\n    const updateButtonData = (keyName, type, filter) => {\n      const displayType = filterTypeMap[type] || type; // 타입을 매핑하여 한글로 변환\n      buttons.value.push({\n        keyName,\n        type: displayType,\n        filter\n      });\n    };\n    const resetButtons = () => {\n      buttons.value.forEach(button => {\n        eventbus.SearchResultEvent.removeFilter(button.type, button.filter);\n      });\n      buttons.value = [];\n    };\n    const removeButton = index => {\n      const button = buttons.value[index];\n      if (button) {\n        eventbus.SearchResultEvent.removeFilter(button.type, button.filter); // 필터 제거 이벤트 발생\n      }\n      buttons.value.splice(index, 1); // 특정 인덱스의 버튼 삭제\n    };\n\n    // 이벤트 리스너 등록\n    onMounted(() => {\n      eventbus.SearchResultEvent.add('filterUpdate', updateButtonData);\n      eventbus.SearchResultEvent.add('resetButtons', resetButtons);\n    });\n    const __returned__ = {\n      buttons,\n      filterTypeMap,\n      updateButtonData,\n      resetButtons,\n      removeButton,\n      ref,\n      onMounted,\n      get eventbus() {\n        return eventbus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","eventbus","buttons","filterTypeMap","contains","notContains","equals","notEqual","startsWith","endsWith","updateButtonData","keyName","type","filter","displayType","value","push","resetButtons","forEach","button","SearchResultEvent","removeFilter","removeButton","index","splice","add"],"sources":["C:/Users/손승연/IdeaProjects/payinfo/frontend/src/components/common/SearchFilterBtnComponent.vue"],"sourcesContent":["<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport eventbus from '@/eventbus/eventbus';\r\n\r\nconst buttons = ref([]);\r\n\r\n// 필터 타입에 대한 한글 매핑\r\nconst filterTypeMap = {\r\n  contains: '포함',\r\n  notContains: '포함하지 않음',\r\n  equals: '같음',\r\n  notEqual: '같지 않음',\r\n  startsWith: '시작하는',\r\n  endsWith: '끝나는',\r\n};\r\n\r\nconst updateButtonData = (keyName, type, filter) => {\r\n  const displayType = filterTypeMap[type] || type; // 타입을 매핑하여 한글로 변환\r\n  buttons.value.push({ keyName, type: displayType, filter });\r\n}\r\n\r\nconst resetButtons = () => {\r\n  buttons.value.forEach(button => {\r\n    eventbus.SearchResultEvent.removeFilter(button.type, button.filter);\r\n  });\r\n  buttons.value = [];\r\n}\r\n\r\nconst removeButton = (index) => {\r\n  const button = buttons.value[index];\r\n  if (button) {\r\n    eventbus.SearchResultEvent.removeFilter(button.type, button.filter); // 필터 제거 이벤트 발생\r\n  }\r\n  buttons.value.splice(index, 1); // 특정 인덱스의 버튼 삭제\r\n};\r\n\r\n// 이벤트 리스너 등록\r\nonMounted(() => {\r\n  eventbus.SearchResultEvent.add('filterUpdate', updateButtonData);\r\n  eventbus.SearchResultEvent.add('resetButtons', resetButtons);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <button v-for=\"(button, index) in buttons\" :key=\"index\" class=\"btn filterBtn\">\r\n      {{ button.keyName }}: {{ button.filter }} {{ button.type }}\r\n      <span class=\"remove-btn\" @click.stop=\"removeButton(index)\">X</span>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.filterBtn {\r\n  background-color: white;\r\n  border-radius: 20px;\r\n  margin: 5px;\r\n  border: 1px solid #b4c7dd;\r\n  position: relative; /* 상대 위치로 설정 */\r\n  padding-right: 20px; /* X 버튼 공간 확보 */\r\n}\r\n\r\n.remove-btn {\r\n  position: absolute; /* 절대 위치로 설정 */\r\n  right: 5px; /* 오른쪽 여백 */\r\n  top: 50%; /* 수직 중앙 정렬 */\r\n  transform: translateY(-50%); /* 중앙 정렬 보정 */\r\n  cursor: pointer; /* 커서 모양 변경 */\r\n  color: red; /* X 버튼 색상 */\r\n}\r\n</style>"],"mappings":";AACA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,QAAQ,MAAM,qBAAqB;;;;;;;IAE1C,MAAMC,OAAO,GAAGH,GAAG,CAAC,EAAE,CAAC;;IAEvB;IACA,MAAMI,aAAa,GAAG;MACpBC,QAAQ,EAAE,IAAI;MACdC,WAAW,EAAE,SAAS;MACtBC,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAE,OAAO;MACjBC,UAAU,EAAE,MAAM;MAClBC,QAAQ,EAAE;IACZ,CAAC;IAED,MAAMC,gBAAgB,GAAGA,CAACC,OAAO,EAAEC,IAAI,EAAEC,MAAM,KAAK;MAClD,MAAMC,WAAW,GAAGX,aAAa,CAACS,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC;MACjDV,OAAO,CAACa,KAAK,CAACC,IAAI,CAAC;QAAEL,OAAO;QAAEC,IAAI,EAAEE,WAAW;QAAED;MAAO,CAAC,CAAC;IAC5D,CAAC;IAED,MAAMI,YAAY,GAAGA,CAAA,KAAM;MACzBf,OAAO,CAACa,KAAK,CAACG,OAAO,CAACC,MAAM,IAAI;QAC9BlB,QAAQ,CAACmB,iBAAiB,CAACC,YAAY,CAACF,MAAM,CAACP,IAAI,EAAEO,MAAM,CAACN,MAAM,CAAC;MACrE,CAAC,CAAC;MACFX,OAAO,CAACa,KAAK,GAAG,EAAE;IACpB,CAAC;IAED,MAAMO,YAAY,GAAIC,KAAK,IAAK;MAC9B,MAAMJ,MAAM,GAAGjB,OAAO,CAACa,KAAK,CAACQ,KAAK,CAAC;MACnC,IAAIJ,MAAM,EAAE;QACVlB,QAAQ,CAACmB,iBAAiB,CAACC,YAAY,CAACF,MAAM,CAACP,IAAI,EAAEO,MAAM,CAACN,MAAM,CAAC,CAAC,CAAC;MACvE;MACAX,OAAO,CAACa,KAAK,CAACS,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC;;IAED;IACAvB,SAAS,CAAC,MAAM;MACdC,QAAQ,CAACmB,iBAAiB,CAACK,GAAG,CAAC,cAAc,EAAEf,gBAAgB,CAAC;MAChET,QAAQ,CAACmB,iBAAiB,CAACK,GAAG,CAAC,cAAc,EAAER,YAAY,CAAC;IAC9D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}