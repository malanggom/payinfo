{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ag-theme-quartz search-result pl10\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"98%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ag_grid_vue = _resolveComponent(\"ag-grid-vue\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_ag_grid_vue, {\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"100%\"\n    },\n    columnDefs: _ctx.columnDefs,\n    onGridReady: _ctx.onGridReady,\n    defaultColDef: _ctx.defaultColDef,\n    rowSelection: _ctx.rowSelection,\n    rowData: _ctx.rowData,\n    \"grid-options\": _ctx.gridOptions,\n    textFilterParams: _ctx.textFilterParams,\n    pagination: true,\n    onCellValueChanged: _ctx.onCellValueChanged\n  }, null, 8 /* PROPS */, [\"columnDefs\", \"onGridReady\", \"defaultColDef\", \"rowSelection\", \"rowData\", \"grid-options\", \"textFilterParams\", \"onCellValueChanged\"])]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_createVNode","_component_ag_grid_vue","columnDefs","_ctx","onGridReady","defaultColDef","rowSelection","rowData","gridOptions","textFilterParams","pagination","onCellValueChanged"],"sources":["C:\\Users\\User\\.intelij\\payinfo\\frontend\\src\\components\\DevInq\\SearchResultComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"ag-theme-quartz search-result pl10\" style=\"width: 100%; height: 98%;\">\r\n    <ag-grid-vue\r\n        style=\"width: 100%; height: 100%;\"\r\n        :columnDefs=\"columnDefs\"\r\n        @grid-ready=\"onGridReady\"\r\n        :defaultColDef=\"defaultColDef\"\r\n        :rowSelection=\"rowSelection\"\r\n        :rowData=\"rowData\"\r\n        :grid-options=\"gridOptions\"\r\n        :textFilterParams=\"textFilterParams\"\r\n        :pagination=\"true\"\r\n        @cell-value-changed=\"onCellValueChanged\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, ref, shallowRef} from \"vue\";\r\nimport { AgGridVue } from \"ag-grid-vue3\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\r\nimport eventbus from '@/eventbus/eventbus'\r\n\r\n//Vue 3에서 컴포넌트를 정의하는 함수입니다. 이 함수는 컴포넌트의 옵션을 포함하는 객체를 인자로 받습니다.\r\nexport default defineComponent({\r\n  //ag-grid-vue3패키지를 가져온 모듈 AgGridVue를 ag-grid-vue라는 이름으로 현재 컴포넌트에서 사용할 때 사용한다.\r\n  components: {\r\n    \"ag-grid-vue\": AgGridVue,\r\n  },\r\n  //이 함수는 Vue 3 컴포넌트의 생명 주기 중에 초기화되는 함수로, 컴포넌트가 생성될 때 실행됩니다.\r\n  //이 함수는 컴포넌트의 반응형 상태 및 메소드를 정의하고 반환하여, 템플릿에서 사용할 수 있도록 합니다.\r\n  setup() {\r\n    //gridApi라는 변수를 정의하고 shallowRef()를 사용하여 반응형 참조를 생성합니다.\r\n    //shallowRef()는 객체의 내부 값을 추적하지 않고, 기본 값만 반응형으로 만드는 함수입니다. 주로 성능 최적화를 위해 사용됩니다.\r\n    //이 경우, gridApi는 AG Grid API를 참조하기 위해 사용될 것입니다.\r\n    const gridApi = shallowRef();\r\n    //defaultColDef라는 변수를 정의하고 ref()를 사용하여 반응형 객체를 생성합니다.\r\n    //ref()는 기본 타입의 값을 반응형으로 만들어 Vue의 반응형 시스템에서 관리할 수 있게 합니다.\r\n    //AG Grid의 열(column) 정의의 기본 설정을 포함하는 객체\r\n    const defaultColDef = ref({\r\n      editable: true,//열의 셀을 편집 가능하게 설정합니다.\r\n      filter: true,//열에서 필터링 기능을 활성화합니다.\r\n      flex: 1,//이 열이 가용 공간을 어떻게 차지할지를 설정합니다. flex 값이 높을수록 더 많은 공간을 차지합니다.\r\n      headerClass: \"centered\", //모든 열의 헤더에 \"centered\"라는 CSS 클래스를 적용하여 중앙 정렬합니다.\r\n      headerStyle: \"headerColor\" //헤더의 배경색을 설정하는 CSS 클래스입니다.\r\n    });\r\n\r\n    //AG Grid에서 사용할 텍스트 필터의 매개변수를 정의하는 객체\r\n    const textFilterParams ={\r\n      filterOptions: [\"contains\", \"notContains\"],//필터링 옵션을 정의합니다. 사용자가 선택할 수 있는 필터링 방법으로 \"contains\" (포함)와 \"notContains\" (포함되지 않음)를 제공합니다.\r\n      caseSensitive: false,//대소문자를 구분하지 않도록 설정합니다. 이 경우, 필터링 시 대소문자를 무시합니다.\r\n      trimInput: true,//입력값의 앞뒤 공백을 자동으로 제거하도록 설정합니다. 사용자가 입력한 값이 공백을 포함하더라도 이를 제거하여 필터링에 영향을 주지 않게 합니다.\r\n      buttons: [\"cancel\", \"reset\", \"apply\"],//필터 UI에 표시할 버튼을 정의합니다. 여기서는 \"취소\", \"초기화\", \"적용\" 버튼이 표시됩니다.\r\n      localeText: {//버튼에 대한 로컬라이즈된 텍스트를 정의합니다.\r\n        cancel: '취소',\r\n        reset: '초기화',\r\n        apply: '적용',\r\n      },\r\n      closeOnApply: true,//\"적용\" 버튼을 클릭했을 때 필터 UI를 닫도록 설정합니다. 사용자가 필터를 적용한 후 UI가 자동으로 닫히게 됩니다.\r\n      // onReset: resetFilters, //리셋 버튼 클릭 시 호출될 함수\r\n    };\r\n\r\n    const numberFilterParams ={\r\n      filterOptions: [\"equals\", \"greaterThanOrEqual\", \"lessThanOrEqual\", \"inRange\"],\r\n      trimInput: true,\r\n      buttons: [\"cancel\", \"reset\", \"apply\"],//필터 UI에 표시할 버튼을 정의합니다. 여기서는 \"취소\", \"초기화\", \"적용\" 버튼이 표시됩니다.\r\n      localeText: {//버튼에 대한 로컬라이즈된 텍스트를 정의합니다.\r\n        cancel: '취소',\r\n        reset: '초기화',\r\n        apply: '적용',\r\n      },\r\n      closeOnApply: true,//\"적용\" 버튼을 클릭했을 때 필터 UI를 닫도록 설정합니다. 사용자가 필터를 적용한 후 UI가 자동으로 닫히게 됩니다.\r\n      onReset: () => {\r\n        // 리셋 버튼 클릭 시 호출되는 함수\r\n        alert('reset버튼누름');\r\n        // 추가적인 리셋 로직이 있다면 여기에 작성\r\n      },\r\n    };\r\n\r\n\r\n    //열의 너비 자동 조절 전략을 설정합니다.\r\n    //각 열의 셀 내용에 맞춰 열의 너비를 자동으로 조절하도록 설정합니다. 즉, 셀의 내용이 잘리지 않도록 열 크기를 조정합니다.\r\n    const gridOptions = {\r\n      autoSizeStrategy: {\r\n        type: 'fitCellContents',\r\n      },\r\n      localeText: {// 필터 관련 텍스트를 한글로 변경\r\n        contains: '포함',\r\n        notContains: '포함하지 않음',\r\n        equals: '같음',\r\n        notEqual: '같지 않음',\r\n        startsWith: '시작하는',\r\n        endsWith: '끝나는',\r\n        blank: '비어 있음',\r\n        notBlank: '비어 있지 않음',\r\n        empty: '하나를 선택',\r\n        //숫자필터 관련\r\n        greaterThanOrEqual: '이상',\r\n        lessThanOrEqual: '이하',\r\n        inRange: '범위 내',\r\n      },\r\n    };\r\n    //columnDefs는 Vue의 반응형 객체로, AG Grid에서 사용할 열(column)의 정의 목록입니다. 각 열은 객체로 정의되어 있습니다.\r\n    const columnDefs = ref([\r\n      //headerName: 열의 헤더에 표시될 이름입니다.\r\n      //field: 데이터의 어떤 필드를 이 열과 연결할지를 지정합니다. 이 필드는 데이터 소스에서 가져온 객체의 키입니다.\r\n      //minWidth: 열의 최소 너비를 설정합니다. 이 값보다 작아지지 않도록 보장합니다.\r\n      //checkboxSelection: 이 열에서 체크박스를 표시할지 여부를 결정합니다. 주로 선택 기능이 필요한 경우 사용됩니다.\r\n      //headerCheckboxSelection: 헤더에 체크박스를 추가하여 전체 선택/해제를 가능하게 합니다.\r\n      //filter: 이 열에서 사용할 필터링 방법을 지정합니다. 예를 들어, \"agTextColumnFilter\"는 텍스트 기반 필터를 사용합니다.\r\n      //filterParams: 필터의 추가 설정을 위한 매개변수입니다.\r\n      // { headerName: '개발자번호', field: \"DEV_NO\", minWidth: 170, checkboxSelection: true, headerCheckboxSelection: true },\r\n      { headerName: '이름', field: \"NM\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams, checkboxSelection: true, headerCheckboxSelection: true },\r\n      { headerName: '프로젝트투입상태', field: \"PJ_INP_STTS\", minWidth: 200, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계약횟수', field: \"CTRT_NMTM\", minWidth: 140, filter: \"agNumberColumnFilter\",filterParams: numberFilterParams},\r\n      { headerName: '생년월일', field: \"BRDT\", minWidth: 140, filter: \"agNumberColumnFilter\",filterParams: numberFilterParams},\r\n      { headerName: '나이', field: \"AGE\", minWidth: 100, filter: \"agNumberColumnFilter\",filterParams: numberFilterParams},\r\n      { headerName: '학력', field: \"ACBG\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '성별', field: \"GNDR\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '직위', field: \"JBPS\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '등급', field: \"GRD\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '총경력기간', field: \"T_CR_PER\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '지역', field: \"RGN\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '휴대전화번호', field: \"MBL_TELNO\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '이메일', field: \"EML\", minWidth: 120, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '컨택방법', field: \"CONTT_MTHD\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '인터뷰요청일', field: \"NTRV_DMND_DT\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '투입가능일', field: \"INP_PSBLTY_DT\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '소속회사', field: \"OGDP_CO\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '일련번호', field: \"SN\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '3.3%여부', field: \"WHTAX_YN\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '사업자여부', field: \"BZMN_YN\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '자사정규직여부', field: \"KDS_EMP_YN\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계약회사정규직여부', field: \"CTRT_CO_EMP_YN\", minWidth: 210, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '대금수령날짜', field: \"CLCT_PICKUP_DT\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '지급일자', field: \"GIVE_DT\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '은행', field: \"BANK\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계좌번호', field: \"ACTNO\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '부서', field: \"DEPT\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '월요청단가', field: \"MM_DMND_UNTPRC\", minWidth: 170, filter: \"agNumberColumnFilter\",filterParams: numberFilterParams},\r\n      { headerName: '주소', field: \"ADDR\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '직책', field: \"JBTTL\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '소개자', field: \"BRKR\", minWidth: 120, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '카카오톡닉네임', field: \"KAKAO_NICK\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계약이력존재여부', field: \"CTRT_HSTRY_YN\", minWidth: 200, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '병역', field: \"MS\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '기종', field: \"MDL\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '운영체제', field: \"OS\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '언어', field: \"LANG\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '데이터베이스', field: \"DB\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '툴', field: \"TOOL\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '프레임워크', field: \"FRMW\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '라이브러리', field: \"LBRR\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '통신', field: \"CMNCT\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '기타', field: \"ETC\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n    ]);\r\n\r\n    const rowSelection = ref(\"multiple\");\r\n    const rowData = ref([]);\r\n    // const currentlyActiveFilterModel = ref([]);\r\n    const filterModel = ref([]);\r\n\r\n    const getCurrentFilterModel = () => {\r\n      if (gridApi.value) {\r\n        return gridApi.value.getFilterModel(); // filterModel을 반환\r\n      }\r\n    };\r\n\r\n\r\n    const onGridReady = async (params) => {\r\n      console.log(gridApi.value);\r\n      gridApi.value = params.api;\r\n\r\n      eventbus.SearchResultEvent.add('search', fetchData);\r\n      eventbus.SearchResultEvent.add('removeFilter', removeFilter);\r\n      params.api.addEventListener('filterChanged', () => {\r\n        filterModel.value = getCurrentFilterModel();\r\n        console.log(filterModel.value);\r\n\r\n        Object.keys(filterModel.value).forEach(key => {\r\n          const filterObject = filterModel.value[key];\r\n          console.log(`필터 키: ${key}, 필터 객체:`, filterObject);\r\n\r\n          // 이미 추가된 필터는 검증하지 않도록 조건 변경\r\n          // if (filterObject?.conditions && filterObject.conditions.length > 0) {\r\n          if (filterObject?.conditions) {\r\n            // const filtersToRemove = [];\r\n\r\n            const currentCondition = filterObject.conditions[0];\r\n            const currentCondition1 = filterObject.conditions[1];\r\n\r\n            // const isFilterRegistered = eventbus.SearchResultEvent.getRegisteredFilters().some(registeredFilter =>\r\n            //     registeredFilter.filter === currentCondition.filter && registeredFilter.type === currentCondition.type\r\n            // );\r\n            // const isFilterRegistered1 = eventbus.SearchResultEvent.getRegisteredFilters().some(registeredFilter =>\r\n            //     registeredFilter.filter === currentCondition1.filter && registeredFilter.type === currentCondition1.type\r\n            // );\r\n\r\n            if (currentCondition.filter === currentCondition1.filter && currentCondition.type === currentCondition1.type) {\r\n              alert(currentCondition+' 와 '+currentCondition1+' 의 필터값이 같습니다.');\r\n              // console.log(eventbus.getRegisteredFilters());\r\n              console.log(key, ',1 필터값: ',currentCondition1.type,',1 필터값: ',currentCondition1.filter);\r\n              console.log(key, ',필터값: ',currentCondition.type,',필터값: ',currentCondition.filter);\r\n\r\n            }else{\r\n              eventbus.SearchResultEvent.filterUpdate(key, currentCondition.type, currentCondition.filter);\r\n              eventbus.SearchResultEvent.filterUpdate(key, currentCondition1.type, currentCondition1.filter);\r\n\r\n            }\r\n\r\n            console.log(filterObject);\r\n            // AG Grid에 필터 모델 업데이트\r\n            const updatedFilterModel = { ...filterModel.value }; // 깊은 복사\r\n            params.api.setFilterModel(updatedFilterModel);\r\n            console.log('업데이트된 필터 모델:', updatedFilterModel);\r\n          } else {//필터 한개 등록 시\r\n            // const isFilterRegistered = eventbus.SearchResultEvent.getRegisteredFilters().some(registeredFilter =>\r\n            //     registeredFilter.filter === filterObject.filter && registeredFilter.type === filterObject.type\r\n            // );\r\n            //\r\n            // if (!isFilterRegistered) { // 등록되지 않은 필터인 경우\r\n              eventbus.SearchResultEvent.filterUpdate(key, filterModel.value[key].type, filterModel.value[key].filter);\r\n\r\n            // }\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/data');\r\n        const data = await response.json();\r\n\r\n        const translatedData = data.result.row.map(item => ({\r\n          DEV_NO: item.DEV_NO, // 개발자번호\r\n          NM: item.NM, // 이름\r\n          PJ_INP_STTS: item.PJ_INP_STTS, // 프로젝트투입상태\r\n          CTRT_NMTM: item.CTRT_NMTM, // 계약횟수\r\n          BRDT: item.BRDT, // 생년월일\r\n          GNDR: item.GNDR, // 성별\r\n          JBPS: item.JBPS, // 직위\r\n          GRD: item.GRD, // 등급\r\n          T_CR_PER: item.T_CR_PER, // 총경력기간\r\n          RGN: item.RGN, // 지역\r\n          MBL_TELNO: item.MBL_TELNO, // 휴대전화번호\r\n          EML: item.EML, // 이메일\r\n          CONTT_MTHD: item.CONTT_MTHD, // 컨택방법\r\n          NTRV_DMND_DT: item.NTRV_DMND_DT, // 인터뷰요청일\r\n          INP_PSBLTY_DT: item.INP_PSBLTY_DT, // 투입가능일\r\n          OGDP_CO: item.OGDP_CO, // 소속회사\r\n          SN: item.SN, // 일련번호\r\n          WHTAX_YN: item.WHTAX_YN, // 3.3%여부\r\n          BZMN_YN: item.BZMN_YN, // 사업자여부\r\n          KDS_EMP_YN: item.KDS_EMP_YN, // 자사정규직여부\r\n          CTRT_CO_EMP_YN: item.CTRT_CO_EMP_YN, // 계약회사정규직여부\r\n          CLCT_PICKUP_DT: item.CLCT_PICKUP_DT, // 대금수령날짜\r\n          GIVE_DT: item.GIVE_DT, // 지급일자\r\n          BANK: item.BANK, // 은행\r\n          ACTNO: item.ACTNO, // 계좌번호\r\n          DEPT: item.DEPT, // 부서\r\n          MM_DMND_UNTPRC: item.MM_DMND_UNTPRC, // 월요청단가\r\n          ADDR: item.ADDR, // 주소\r\n          JBTTL: item.JBTTL, // 직책\r\n          BRKR: item.BRKR, // 소개자\r\n          KAKAO_NICK: item.KAKAO_NICK, // 카카오톡닉네임\r\n          CTRT_HSTRY_YN: item.CTRT_HSTRY_YN, // 계약이력존재여부\r\n          MS: item.MS, // 병역\r\n          MDL: item.MDL, // 모델\r\n          OS: item.OS, // 운영 체제\r\n          LANG: item.LANG, // 언어\r\n          DB: item.DB, // 데이터베이스\r\n          TOOL: item.TOOL, // 툴\r\n          FRMW: item.FRMW, // 프레임워크\r\n          LBRR: item.LBRR, // 라이브러리\r\n          CMNCT: item.CMNCT, // 통신\r\n          ETC: item.ETC, // 기타\r\n          AGE: item.AGE, // 나이\r\n          ACBG: item.ACBG // 학력\r\n        }));\r\n        rowData.value = translatedData;\r\n        gridApi.value.refreshCells();\r\n      } catch (error) {\r\n        console.error('데이터 로드 오류:', error);\r\n        rowData.value = [];\r\n      }\r\n    };\r\n\r\n    // 셀의 값이 변경될 때 호출되는 함수\r\n    const onCellValueChanged = async (event) => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/updateData', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(event.data),\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Failed to update data');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating data:', error);\r\n      }\r\n    };\r\n\r\n    //--- 필터초기화 시작 ---//\r\n    const resetFilter = () => {\r\n      gridApi.value.setFilterModel(null);\r\n      // eventbus.SearchResultEvent.removeFilter(null);\r\n    };\r\n    const removeFilter = (keyName) => {\r\n      const filterModel = gridApi.value.getFilterModel(); // 현재 필터 모델 가져오기\r\n      console.log('현재 필터 모델:', filterModel); // 필터 모델 출력\r\n\r\n      if (filterModel[keyName]) {\r\n        delete filterModel[keyName]; // 특정 필터 제거\r\n        gridApi.value.setFilterModel(filterModel); // 업데이트된 필터 모델 설정\r\n        console.log(`필터 '${keyName}'이(가) 제거되었습니다.`);\r\n      } else {\r\n        console.log(`필터 '${keyName}'이(가) 적용되지 않았습니다.`);\r\n      }\r\n    };\r\n    // 이벤트 등록\r\n    eventbus.SearchResultEvent.add('reset', resetFilter);\r\n    //--- 필터초기화 끝 ---//\r\n    //--- 선택된 행 삭제 시작 ---//\r\n    const deleteRowBtnClick = async () => {\r\n      const selectedNodes = gridApi.value.getSelectedNodes();\r\n      const selectedData = selectedNodes.map(node => node.data);\r\n\r\n      // 삭제할 개발자번호 목록\r\n      const devNoList = selectedData.map(row => row.DEV_NO);\r\n\r\n      // 서버에 DELETE 요청 보내기\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/deleteData', {\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ devNoList }), // 개발자번호 배열 전송\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to delete data');\r\n        }\r\n\r\n        // 서버에서 삭제가 완료되면 로컬 데이터 갱신\r\n        rowData.value = rowData.value.filter(row => !devNoList.includes(row.DEV_NO));\r\n\r\n        // 선택된 행 삭제 후 그리드 업데이트\r\n        // gridApi.value.setRowData(rowData.value);\r\n      } catch (error) {\r\n        console.error('Error deleting data:', error);\r\n        alert(\"삭제할 개발자를 선택해주세요.\");\r\n      }\r\n    };\r\n    // 이벤트 등록\r\n    eventbus.SearchResultEvent.add('deleteRow', deleteRowBtnClick);\r\n    //--- 선택된 행 삭제 끝 ---//\r\n\r\n\r\n\r\n\r\n    return {\r\n      columnDefs,\r\n      gridApi,\r\n      defaultColDef,\r\n      rowSelection,\r\n      rowData,\r\n      gridOptions,\r\n      onGridReady,\r\n      onCellValueChanged,\r\n      deleteRowBtnClick,\r\n      resetFilter,\r\n      removeFilter,\r\n      getCurrentFilterModel,\r\n      textFilterParams,\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style>\r\n@import \"ag-grid-community/styles/ag-grid.css\";\r\n@import \"ag-grid-community/styles/ag-theme-quartz.css\";\r\n\r\n.centered {\r\n  .ag-header-cell-label {\r\n    justify-content: center !important;\r\n  }\r\n}\r\n\r\n.headerColor{\r\n  background-color: #e8e8e8 !important;;\r\n}\r\n.pl10{\r\n  padding-left: 10px;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC,oCAAoC;EAACC,KAAiC,EAAjC;IAAA;IAAA;EAAA;;;;uBAAhDC,mBAAA,CAaM,OAbNC,UAaM,GAZJC,YAAA,CAWEC,sBAAA;IAVEJ,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAAkC;IACjCK,UAAU,EAAEC,IAAA,CAAAD,UAAU;IACtBE,WAAU,EAAED,IAAA,CAAAC,WAAW;IACvBC,aAAa,EAAEF,IAAA,CAAAE,aAAa;IAC5BC,YAAY,EAAEH,IAAA,CAAAG,YAAY;IAC1BC,OAAO,EAAEJ,IAAA,CAAAI,OAAO;IAChB,cAAY,EAAEJ,IAAA,CAAAK,WAAW;IACzBC,gBAAgB,EAAEN,IAAA,CAAAM,gBAAgB;IAClCC,UAAU,EAAE,IAAI;IAChBC,kBAAkB,EAAER,IAAA,CAAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}