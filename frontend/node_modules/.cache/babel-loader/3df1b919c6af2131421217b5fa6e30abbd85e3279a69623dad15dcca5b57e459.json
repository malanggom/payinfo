{"ast":null,"code":"import { defineComponent, ref, shallowRef } from \"vue\";\nimport { AgGridVue } from \"ag-grid-vue3\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport eventbus from '@/eventbus/eventbus';\n\n//Vue 3에서 컴포넌트를 정의하는 함수입니다. 이 함수는 컴포넌트의 옵션을 포함하는 객체를 인자로 받습니다.\nexport default defineComponent({\n  //ag-grid-vue3패키지를 가져온 모듈 AgGridVue를 ag-grid-vue라는 이름으로 현재 컴포넌트에서 사용할 때 사용한다.\n  components: {\n    \"ag-grid-vue\": AgGridVue\n  },\n  //이 함수는 Vue 3 컴포넌트의 생명 주기 중에 초기화되는 함수로, 컴포넌트가 생성될 때 실행됩니다.\n  //이 함수는 컴포넌트의 반응형 상태 및 메소드를 정의하고 반환하여, 템플릿에서 사용할 수 있도록 합니다.\n  setup() {\n    //gridApi라는 변수를 정의하고 shallowRef()를 사용하여 반응형 참조를 생성합니다.\n    //shallowRef()는 객체의 내부 값을 추적하지 않고, 기본 값만 반응형으로 만드는 함수입니다. 주로 성능 최적화를 위해 사용됩니다.\n    //이 경우, gridApi는 AG Grid API를 참조하기 위해 사용될 것입니다.\n    const gridApi = shallowRef();\n\n    //defaultColDef라는 변수를 정의하고 ref()를 사용하여 반응형 객체를 생성합니다.\n    //ref()는 기본 타입의 값을 반응형으로 만들어 Vue의 반응형 시스템에서 관리할 수 있게 합니다.\n    //AG Grid의 열(column) 정의의 기본 설정을 포함하는 객체\n    const defaultColDef = ref({\n      editable: true,\n      //열의 셀을 편집 가능하게 설정합니다.\n      filter: true,\n      //열에서 필터링 기능을 활성화합니다.\n      flex: 1,\n      //이 열이 가용 공간을 어떻게 차지할지를 설정합니다. flex 값이 높을수록 더 많은 공간을 차지합니다.\n      headerClass: \"centered\",\n      //모든 열의 헤더에 \"centered\"라는 CSS 클래스를 적용하여 중앙 정렬합니다.\n      headerStyle: \"headerColor\" //헤더의 배경색을 설정하는 CSS 클래스입니다.\n    });\n\n    //AG Grid에서 사용할 텍스트 필터의 매개변수를 정의하는 객체\n    const textFilterParams = {\n      filterOptions: [\"contains\", \"notContains\"],\n      //필터링 옵션을 정의합니다. 사용자가 선택할 수 있는 필터링 방법으로 \"contains\" (포함)와 \"notContains\" (포함되지 않음)를 제공합니다.\n      caseSensitive: false,\n      //대소문자를 구분하지 않도록 설정합니다. 이 경우, 필터링 시 대소문자를 무시합니다.\n      trimInput: true,\n      //입력값의 앞뒤 공백을 자동으로 제거하도록 설정합니다. 사용자가 입력한 값이 공백을 포함하더라도 이를 제거하여 필터링에 영향을 주지 않게 합니다.\n      buttons: [\"cancel\", \"reset\", \"apply\"],\n      //필터 UI에 표시할 버튼을 정의합니다. 여기서는 \"취소\", \"초기화\", \"적용\" 버튼이 표시됩니다.\n      localeText: {\n        //버튼에 대한 로컬라이즈된 텍스트를 정의합니다.\n        cancel: '취소',\n        reset: '초기화',\n        apply: '적용'\n      },\n      closeOnApply: true //\"적용\" 버튼을 클릭했을 때 필터 UI를 닫도록 설정합니다. 사용자가 필터를 적용한 후 UI가 자동으로 닫히게 됩니다.\n      // onReset: resetFilters, //리셋 버튼 클릭 시 호출될 함수\n    };\n    const numberFilterParams = {\n      filterOptions: [\"equals\", \"greaterThanOrEqual\", \"lessThanOrEqual\", \"inRange\"],\n      trimInput: true,\n      buttons: [\"cancel\", \"reset\", \"apply\"],\n      //필터 UI에 표시할 버튼을 정의합니다. 여기서는 \"취소\", \"초기화\", \"적용\" 버튼이 표시됩니다.\n      localeText: {\n        //버튼에 대한 로컬라이즈된 텍스트를 정의합니다.\n        cancel: '취소',\n        reset: '초기화',\n        apply: '적용'\n      },\n      closeOnApply: true //\"적용\" 버튼을 클릭했을 때 필터 UI를 닫도록 설정합니다. 사용자가 필터를 적용한 후 UI가 자동으로 닫히게 됩니다.\n    };\n\n    //열의 너비 자동 조절 전략을 설정합니다.\n    //각 열의 셀 내용에 맞춰 열의 너비를 자동으로 조절하도록 설정합니다. 즉, 셀의 내용이 잘리지 않도록 열 크기를 조정합니다.\n    const gridOptions = {\n      autoSizeStrategy: {\n        type: 'fitCellContents'\n      },\n      localeText: {\n        // 필터 관련 텍스트를 한글로 변경\n        contains: '포함',\n        notContains: '포함하지 않음',\n        equals: '같음',\n        notEqual: '같지 않음',\n        startsWith: '시작하는',\n        endsWith: '끝나는',\n        blank: '비어 있음',\n        notBlank: '비어 있지 않음',\n        empty: '하나를 선택',\n        //숫자필터 관련\n        greaterThanOrEqual: '이상',\n        lessThanOrEqual: '이하',\n        inRange: '범위 내'\n      }\n    };\n\n    //columnDefs는 Vue의 반응형 객체로, AG Grid에서 사용할 열(column)의 정의 목록입니다. 각 열은 객체로 정의되어 있습니다.\n    const columnDefs = ref([\n    //headerName: 열의 헤더에 표시될 이름입니다.\n    //field: 데이터의 어떤 필드를 이 열과 연결할지를 지정합니다. 이 필드는 데이터 소스에서 가져온 객체의 키입니다.\n    //minWidth: 열의 최소 너비를 설정합니다. 이 값보다 작아지지 않도록 보장합니다.\n    //checkboxSelection: 이 열에서 체크박스를 표시할지 여부를 결정합니다. 주로 선택 기능이 필요한 경우 사용됩니다.\n    //headerCheckboxSelection: 헤더에 체크박스를 추가하여 전체 선택/해제를 가능하게 합니다.\n    //filter: 이 열에서 사용할 필터링 방법을 지정합니다. 예를 들어, \"agTextColumnFilter\"는 텍스트 기반 필터를 사용합니다.\n    //filterParams: 필터의 추가 설정을 위한 매개변수입니다.\n    // { headerName: '개발자번호', field: \"DEV_NO\", minWidth: 170, checkboxSelection: true, headerCheckboxSelection: true },\n    {\n      headerName: '선택',\n      checkboxSelection: true,\n      minWidth: 100,\n      filter: false,\n      cellClass: 'checkboxCentered'\n    }, {\n      headerName: '이름',\n      field: \"NM\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '프로젝트투입상태',\n      field: \"PJ_INP_STTS\",\n      minWidth: 200,\n      filter: \"agTextColumnFilter\",\n      filterParams: {\n        buttons: [\"reset\", \"apply\"]\n      }\n    }, {\n      headerName: '계약횟수',\n      field: \"CTRT_NMTM\",\n      minWidth: 140,\n      filter: \"agNumberColumnFilter\",\n      filterParams: numberFilterParams\n    }, {\n      headerName: '생년월일',\n      field: \"BRDT\",\n      minWidth: 140,\n      filter: \"agNumberColumnFilter\",\n      filterParams: numberFilterParams\n    }, {\n      headerName: '나이',\n      field: \"AGE\",\n      minWidth: 100,\n      filter: \"agNumberColumnFilter\",\n      filterParams: numberFilterParams\n    }, {\n      headerName: '학력',\n      field: \"ACBG\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '성별',\n      field: \"GNDR\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '직위',\n      field: \"JBPS\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '등급',\n      field: \"GRD\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '총경력기간',\n      field: \"T_CR_PER\",\n      minWidth: 170,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '지역',\n      field: \"RGN\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '휴대전화번호',\n      field: \"MBL_TELNO\",\n      minWidth: 190,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '이메일',\n      field: \"EML\",\n      minWidth: 120,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '컨택방법',\n      field: \"CONTT_MTHD\",\n      minWidth: 140,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '인터뷰요청일',\n      field: \"NTRV_DMND_DT\",\n      minWidth: 190,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '투입가능일',\n      field: \"INP_PSBLTY_DT\",\n      minWidth: 170,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '소속회사',\n      field: \"OGDP_CO\",\n      minWidth: 140,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '일련번호',\n      field: \"SN\",\n      minWidth: 140,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '3.3%여부',\n      field: \"WHTAX_YN\",\n      minWidth: 170,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '사업자여부',\n      field: \"BZMN_YN\",\n      minWidth: 170,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '자사정규직여부',\n      field: \"KDS_EMP_YN\",\n      minWidth: 190,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '계약회사정규직여부',\n      field: \"CTRT_CO_EMP_YN\",\n      minWidth: 210,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '대금수령날짜',\n      field: \"CLCT_PICKUP_DT\",\n      minWidth: 190,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '지급일자',\n      field: \"GIVE_DT\",\n      minWidth: 140,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '은행',\n      field: \"BANK\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '계좌번호',\n      field: \"ACTNO\",\n      minWidth: 140,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '부서',\n      field: \"DEPT\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '월요청단가',\n      field: \"MM_DMND_UNTPRC\",\n      minWidth: 170,\n      filter: \"agNumberColumnFilter\",\n      filterParams: numberFilterParams\n    }, {\n      headerName: '주소',\n      field: \"ADDR\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '직책',\n      field: \"JBTTL\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '소개자',\n      field: \"BRKR\",\n      minWidth: 120,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '카카오톡닉네임',\n      field: \"KAKAO_NICK\",\n      minWidth: 190,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '계약이력존재여부',\n      field: \"CTRT_HSTRY_YN\",\n      minWidth: 200,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '병역',\n      field: \"MS\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '기종',\n      field: \"MDL\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '운영체제',\n      field: \"OS\",\n      minWidth: 140,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '언어',\n      field: \"LANG\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '데이터베이스',\n      field: \"DB\",\n      minWidth: 190,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '툴',\n      field: \"TOOL\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '프레임워크',\n      field: \"FRMW\",\n      minWidth: 170,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '라이브러리',\n      field: \"LBRR\",\n      minWidth: 170,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '통신',\n      field: \"CMNCT\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }, {\n      headerName: '기타',\n      field: \"ETC\",\n      minWidth: 100,\n      filter: \"agTextColumnFilter\",\n      filterParams: textFilterParams\n    }]);\n    console.log('columnDefs.value : ', columnDefs.value);\n    const rowSelection = ref(\"multiple\");\n    const rowData = ref([]);\n    // const currentlyActiveFilterModel = ref([]);\n\n    const getCurrentFilterModel = () => {\n      if (gridApi.value) {\n        return gridApi.value.getFilterModel(); // filterModel을 반환\n      }\n    };\n    const onGridReady = async params => {\n      gridApi.value = params.api;\n\n      // Grid가 준비된 이후에 자식 요소를 추가합니다.\n      // ag-paging-panel 클래스를 가진 요소를 찾습니다.\n      const pagingPanel = document.querySelector('.ag-paging-panel');\n      if (pagingPanel) {\n        const editRows = document.createElement(\"span\");\n        editRows.textContent = \"수정\"; // span의 텍스트 설정\n        editRows.style.cursor = \"pointer\"; // 커서 스타일 설정\n        editRows.style.marginLeft = \"10px\"; // 여백 추가\n\n        // 클릭 이벤트 추가\n        editRows.onclick = () => {\n          console.log(\"수정 버튼 클릭됨\");\n          // 수정 작업을 수행할 수 있습니다.\n        };\n        const firstChild = pagingPanel.firstChild;\n        pagingPanel.insertAfter(editRows, firstChild); // span을 첫 번째 자식 앞에 삽입\n        const deleteRows = document.createElement(\"span\");\n        deleteRows.textContent = \"삭제\"; // span의 텍스트 설정\n        deleteRows.style.cursor = \"pointer\"; // 커서 스타일 설정\n        deleteRows.style.marginLeft = \"10px\"; // 여백 추가\n\n        // 클릭 이벤트 추가\n        deleteRows.onclick = () => {\n          console.log(\"삭제 버튼 클릭됨\");\n          // 수정 작업을 수행할 수 있습니다.\n        };\n        pagingPanel.insertAfter(deleteRows, firstChild); // span을 첫 번째 자식 앞에 삽입\n      }\n      eventbus.SearchResultEvent.add('search', fetchData);\n      eventbus.SearchResultEvent.add('removeFilter', removeFilter);\n      params.api.addEventListener('filterChanged', onFilterChanged);\n    };\n    const previousFilterKeys = ref([]); // 이전 필터 모델 키 저장\n\n    const filterModel = ref([]);\n    const onFilterChanged = async params => {\n      const filterModels = gridApi.value.getFilterModel();\n      const filterModelKeys = Object.keys(filterModels);\n      console.log('Current Filter Model:', filterModels);\n      console.log('filterModel : ', filterModelKeys);\n\n      // 현재 필터 모델에서 이전 필터 키와 비교하여 해제된 필터 찾기\n      previousFilterKeys.value.forEach(key => {\n        if (!filterModelKeys.includes(key)) {\n          console.log(`${key} 필터가 해제되었습니다!`);\n          eventbus.SearchResultEvent.removeFilter(key); // 해제된 필터에 대한 버튼 삭제\n        }\n      });\n\n      // 현재 필터 모델 키를 이전 필터 모델 키로 업데이트\n      previousFilterKeys.value = filterModelKeys;\n      filterModel.value = getCurrentFilterModel();\n      // console.log(filterModel.value);\n\n      Object.keys(filterModel.value).forEach(key => {\n        const filterObject = filterModel.value[key];\n        // console.log(`필터 키: ${key}, 필터 객체:`, filterObject);\n\n        // 이미 추가된 필터는 검증하지 않도록 조건 변경\n        // if (filterObject?.conditions && filterObject.conditions.length > 0) {\n        if (filterObject?.conditions) {\n          // const filtersToRemove = [];\n\n          const currentCondition = filterObject.conditions[0];\n          const currentCondition1 = filterObject.conditions[1];\n\n          // const isFilterRegistered = eventbus.SearchResultEvent.getRegisteredFilters().some(registeredFilter =>\n          //     registeredFilter.filter === currentCondition.filter && registeredFilter.type === currentCondition.type\n          // );\n          // const isFilterRegistered1 = eventbus.SearchResultEvent.getRegisteredFilters().some(registeredFilter =>\n          //     registeredFilter.filter === currentCondition1.filter && registeredFilter.type === currentCondition1.type\n          // );\n\n          if (currentCondition.filter === currentCondition1.filter && currentCondition.type === currentCondition1.type) {\n            alert(currentCondition + ' 와 ' + currentCondition1 + ' 의 필터값이 같습니다.');\n            // console.log(eventbus.getRegisteredFilters());\n            console.log(key, ',1 필터값: ', currentCondition1.type, ',1 필터값: ', currentCondition1.filter);\n            console.log(key, ',필터값: ', currentCondition.type, ',필터값: ', currentCondition.filter);\n          } else {\n            eventbus.SearchResultEvent.filterUpdate(key, currentCondition.type, currentCondition.filter);\n            eventbus.SearchResultEvent.filterUpdate(key, currentCondition1.type, currentCondition1.filter);\n          }\n          console.log(filterObject);\n          // AG Grid에 필터 모델 업데이트\n          const updatedFilterModel = {\n            ...filterModel.value\n          }; // 깊은 복사\n          params.api.setFilterModel(updatedFilterModel);\n          console.log('업데이트된 필터 모델:', updatedFilterModel);\n        } else {\n          //필터 한개 등록 시\n          // const isFilterRegistered = eventbus.SearchResultEvent.getRegisteredFilters().some(registeredFilter =>\n          //     registeredFilter.filter === filterObject.filter && registeredFilter.type === filterObject.type\n          // );\n          //\n          // if (!isFilterRegistered) { // 등록되지 않은 필터인 경우\n          eventbus.SearchResultEvent.filterUpdate(key, filterModel.value[key].type, filterModel.value[key].filter);\n\n          // }\n        }\n      });\n    };\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/api/data');\n        const data = await response.json();\n        const translatedData = data.result.row.map(item => ({\n          DEV_NO: item.DEV_NO,\n          // 개발자번호\n          NM: item.NM,\n          // 이름\n          PJ_INP_STTS: item.PJ_INP_STTS,\n          // 프로젝트투입상태\n          CTRT_NMTM: item.CTRT_NMTM,\n          // 계약횟수\n          BRDT: item.BRDT,\n          // 생년월일\n          GNDR: item.GNDR,\n          // 성별\n          JBPS: item.JBPS,\n          // 직위\n          GRD: item.GRD,\n          // 등급\n          T_CR_PER: item.T_CR_PER,\n          // 총경력기간\n          RGN: item.RGN,\n          // 지역\n          MBL_TELNO: item.MBL_TELNO,\n          // 휴대전화번호\n          EML: item.EML,\n          // 이메일\n          CONTT_MTHD: item.CONTT_MTHD,\n          // 컨택방법\n          NTRV_DMND_DT: item.NTRV_DMND_DT,\n          // 인터뷰요청일\n          INP_PSBLTY_DT: item.INP_PSBLTY_DT,\n          // 투입가능일\n          OGDP_CO: item.OGDP_CO,\n          // 소속회사\n          SN: item.SN,\n          // 일련번호\n          WHTAX_YN: item.WHTAX_YN,\n          // 3.3%여부\n          BZMN_YN: item.BZMN_YN,\n          // 사업자여부\n          KDS_EMP_YN: item.KDS_EMP_YN,\n          // 자사정규직여부\n          CTRT_CO_EMP_YN: item.CTRT_CO_EMP_YN,\n          // 계약회사정규직여부\n          CLCT_PICKUP_DT: item.CLCT_PICKUP_DT,\n          // 대금수령날짜\n          GIVE_DT: item.GIVE_DT,\n          // 지급일자\n          BANK: item.BANK,\n          // 은행\n          ACTNO: item.ACTNO,\n          // 계좌번호\n          DEPT: item.DEPT,\n          // 부서\n          MM_DMND_UNTPRC: item.MM_DMND_UNTPRC,\n          // 월요청단가\n          ADDR: item.ADDR,\n          // 주소\n          JBTTL: item.JBTTL,\n          // 직책\n          BRKR: item.BRKR,\n          // 소개자\n          KAKAO_NICK: item.KAKAO_NICK,\n          // 카카오톡닉네임\n          CTRT_HSTRY_YN: item.CTRT_HSTRY_YN,\n          // 계약이력존재여부\n          MS: item.MS,\n          // 병역\n          MDL: item.MDL,\n          // 모델\n          OS: item.OS,\n          // 운영 체제\n          LANG: item.LANG,\n          // 언어\n          DB: item.DB,\n          // 데이터베이스\n          TOOL: item.TOOL,\n          // 툴\n          FRMW: item.FRMW,\n          // 프레임워크\n          LBRR: item.LBRR,\n          // 라이브러리\n          CMNCT: item.CMNCT,\n          // 통신\n          ETC: item.ETC,\n          // 기타\n          AGE: item.AGE,\n          // 나이\n          ACBG: item.ACBG // 학력\n        }));\n        rowData.value = translatedData;\n        gridApi.value.refreshCells();\n      } catch (error) {\n        console.error('데이터 로드 오류:', error);\n        rowData.value = [];\n      }\n    };\n\n    // 셀의 값이 변경될 때 호출되는 함수\n    const onCellValueChanged = async event => {\n      try {\n        const response = await fetch('http://localhost:8080/api/updateData', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(event.data)\n        });\n        if (!response.ok) {\n          throw new Error('Failed to update data');\n        }\n      } catch (error) {\n        console.error('Error updating data:', error);\n      }\n    };\n\n    //--- 필터초기화 시작 ---//\n    const resetFilter = () => {\n      gridApi.value.setFilterModel(null);\n      // eventbus.SearchResultEvent.removeFilter(null);\n    };\n    const removeFilter = keyName => {\n      const filterModel = gridApi.value.getFilterModel(); // 현재 필터 모델 가져오기\n      console.log('현재 필터 모델:', filterModel); // 필터 모델 출력\n\n      if (filterModel[keyName]) {\n        delete filterModel[keyName]; // 특정 필터 제거\n        gridApi.value.setFilterModel(filterModel); // 업데이트된 필터 모델 설정\n        console.log(`필터 '${keyName}'이(가) 제거되었습니다.`);\n      } else {\n        console.log(`필터 '${keyName}'이(가) 적용되지 않았습니다.`);\n      }\n    };\n    // 이벤트 등록\n    eventbus.SearchResultEvent.add('reset', resetFilter);\n    //--- 필터초기화 끝 ---//\n    //--- 선택된 행 삭제 시작 ---//\n    const deleteRowBtnClick = async () => {\n      const selectedNodes = gridApi.value.getSelectedNodes();\n      const selectedData = selectedNodes.map(node => node.data);\n\n      // 삭제할 개발자번호 목록\n      const devNoList = selectedData.map(row => row.DEV_NO);\n\n      // 서버에 DELETE 요청 보내기\n      try {\n        const response = await fetch('http://localhost:8080/api/deleteData', {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            devNoList\n          }) // 개발자번호 배열 전송\n        });\n        if (!response.ok) {\n          throw new Error('Failed to delete data');\n        }\n\n        // 서버에서 삭제가 완료되면 로컬 데이터 갱신\n        rowData.value = rowData.value.filter(row => !devNoList.includes(row.DEV_NO));\n\n        // 선택된 행 삭제 후 그리드 업데이트\n        // gridApi.value.setRowData(rowData.value);\n      } catch (error) {\n        console.error('Error deleting data:', error);\n        alert(\"삭제할 개발자를 선택해주세요.\");\n      }\n    };\n    // 이벤트 등록\n    eventbus.SearchResultEvent.add('deleteRow', deleteRowBtnClick);\n    //--- 선택된 행 삭제 끝 ---//\n\n    return {\n      columnDefs,\n      gridApi,\n      defaultColDef,\n      rowSelection,\n      rowData,\n      gridOptions,\n      onGridReady,\n      onCellValueChanged,\n      deleteRowBtnClick,\n      resetFilter,\n      removeFilter,\n      getCurrentFilterModel,\n      textFilterParams\n    };\n  }\n});","map":{"version":3,"names":["defineComponent","ref","shallowRef","AgGridVue","eventbus","components","setup","gridApi","defaultColDef","editable","filter","flex","headerClass","headerStyle","textFilterParams","filterOptions","caseSensitive","trimInput","buttons","localeText","cancel","reset","apply","closeOnApply","numberFilterParams","gridOptions","autoSizeStrategy","type","contains","notContains","equals","notEqual","startsWith","endsWith","blank","notBlank","empty","greaterThanOrEqual","lessThanOrEqual","inRange","columnDefs","headerName","checkboxSelection","minWidth","cellClass","field","filterParams","console","log","value","rowSelection","rowData","getCurrentFilterModel","getFilterModel","onGridReady","params","api","pagingPanel","document","querySelector","editRows","createElement","textContent","style","cursor","marginLeft","onclick","firstChild","insertAfter","deleteRows","SearchResultEvent","add","fetchData","removeFilter","addEventListener","onFilterChanged","previousFilterKeys","filterModel","filterModels","filterModelKeys","Object","keys","forEach","key","includes","filterObject","conditions","currentCondition","currentCondition1","alert","filterUpdate","updatedFilterModel","setFilterModel","response","fetch","data","json","translatedData","result","row","map","item","DEV_NO","NM","PJ_INP_STTS","CTRT_NMTM","BRDT","GNDR","JBPS","GRD","T_CR_PER","RGN","MBL_TELNO","EML","CONTT_MTHD","NTRV_DMND_DT","INP_PSBLTY_DT","OGDP_CO","SN","WHTAX_YN","BZMN_YN","KDS_EMP_YN","CTRT_CO_EMP_YN","CLCT_PICKUP_DT","GIVE_DT","BANK","ACTNO","DEPT","MM_DMND_UNTPRC","ADDR","JBTTL","BRKR","KAKAO_NICK","CTRT_HSTRY_YN","MS","MDL","OS","LANG","DB","TOOL","FRMW","LBRR","CMNCT","ETC","AGE","ACBG","refreshCells","error","onCellValueChanged","event","method","headers","body","JSON","stringify","ok","Error","resetFilter","keyName","deleteRowBtnClick","selectedNodes","getSelectedNodes","selectedData","node","devNoList"],"sources":["C:\\Users\\User\\.intelij\\payinfo\\frontend\\src\\components\\DevInq\\SearchResultComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"ag-theme-quartz search-result pl10\" style=\"width: 100%; height: 98%;\">\r\n    <ag-grid-vue\r\n        style=\"width: 100%; height: 100%;\"\r\n        :columnDefs=\"columnDefs\"\r\n        @grid-ready=\"onGridReady\"\r\n        :defaultColDef=\"defaultColDef\"\r\n        :rowSelection=\"rowSelection\"\r\n        :rowData=\"rowData\"\r\n        :grid-options=\"gridOptions\"\r\n        :textFilterParams=\"textFilterParams\"\r\n        :pagination=\"true\"\r\n        @cell-value-changed=\"onCellValueChanged\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, ref, shallowRef} from \"vue\";\r\nimport { AgGridVue } from \"ag-grid-vue3\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\r\nimport eventbus from '@/eventbus/eventbus'\r\n\r\n//Vue 3에서 컴포넌트를 정의하는 함수입니다. 이 함수는 컴포넌트의 옵션을 포함하는 객체를 인자로 받습니다.\r\nexport default defineComponent({\r\n  //ag-grid-vue3패키지를 가져온 모듈 AgGridVue를 ag-grid-vue라는 이름으로 현재 컴포넌트에서 사용할 때 사용한다.\r\n  components: {\r\n    \"ag-grid-vue\": AgGridVue,\r\n  },\r\n  //이 함수는 Vue 3 컴포넌트의 생명 주기 중에 초기화되는 함수로, 컴포넌트가 생성될 때 실행됩니다.\r\n  //이 함수는 컴포넌트의 반응형 상태 및 메소드를 정의하고 반환하여, 템플릿에서 사용할 수 있도록 합니다.\r\n  setup() {\r\n    //gridApi라는 변수를 정의하고 shallowRef()를 사용하여 반응형 참조를 생성합니다.\r\n    //shallowRef()는 객체의 내부 값을 추적하지 않고, 기본 값만 반응형으로 만드는 함수입니다. 주로 성능 최적화를 위해 사용됩니다.\r\n    //이 경우, gridApi는 AG Grid API를 참조하기 위해 사용될 것입니다.\r\n    const gridApi = shallowRef();\r\n\r\n    //defaultColDef라는 변수를 정의하고 ref()를 사용하여 반응형 객체를 생성합니다.\r\n    //ref()는 기본 타입의 값을 반응형으로 만들어 Vue의 반응형 시스템에서 관리할 수 있게 합니다.\r\n    //AG Grid의 열(column) 정의의 기본 설정을 포함하는 객체\r\n    const defaultColDef = ref({\r\n      editable: true,//열의 셀을 편집 가능하게 설정합니다.\r\n      filter: true,//열에서 필터링 기능을 활성화합니다.\r\n      flex: 1,//이 열이 가용 공간을 어떻게 차지할지를 설정합니다. flex 값이 높을수록 더 많은 공간을 차지합니다.\r\n      headerClass: \"centered\", //모든 열의 헤더에 \"centered\"라는 CSS 클래스를 적용하여 중앙 정렬합니다.\r\n      headerStyle: \"headerColor\" //헤더의 배경색을 설정하는 CSS 클래스입니다.\r\n    });\r\n\r\n    //AG Grid에서 사용할 텍스트 필터의 매개변수를 정의하는 객체\r\n    const textFilterParams ={\r\n      filterOptions: [\"contains\", \"notContains\"],//필터링 옵션을 정의합니다. 사용자가 선택할 수 있는 필터링 방법으로 \"contains\" (포함)와 \"notContains\" (포함되지 않음)를 제공합니다.\r\n      caseSensitive: false,//대소문자를 구분하지 않도록 설정합니다. 이 경우, 필터링 시 대소문자를 무시합니다.\r\n      trimInput: true,//입력값의 앞뒤 공백을 자동으로 제거하도록 설정합니다. 사용자가 입력한 값이 공백을 포함하더라도 이를 제거하여 필터링에 영향을 주지 않게 합니다.\r\n      buttons: [\"cancel\", \"reset\", \"apply\"],//필터 UI에 표시할 버튼을 정의합니다. 여기서는 \"취소\", \"초기화\", \"적용\" 버튼이 표시됩니다.\r\n      localeText: {//버튼에 대한 로컬라이즈된 텍스트를 정의합니다.\r\n        cancel: '취소',\r\n        reset: '초기화',\r\n        apply: '적용',\r\n      },\r\n      closeOnApply: true,//\"적용\" 버튼을 클릭했을 때 필터 UI를 닫도록 설정합니다. 사용자가 필터를 적용한 후 UI가 자동으로 닫히게 됩니다.\r\n      // onReset: resetFilters, //리셋 버튼 클릭 시 호출될 함수\r\n    };\r\n\r\n    const numberFilterParams ={\r\n      filterOptions: [\"equals\", \"greaterThanOrEqual\", \"lessThanOrEqual\", \"inRange\"],\r\n      trimInput: true,\r\n      buttons: [\"cancel\", \"reset\", \"apply\"],//필터 UI에 표시할 버튼을 정의합니다. 여기서는 \"취소\", \"초기화\", \"적용\" 버튼이 표시됩니다.\r\n      localeText: {//버튼에 대한 로컬라이즈된 텍스트를 정의합니다.\r\n        cancel: '취소',\r\n        reset: '초기화',\r\n        apply: '적용',\r\n      },\r\n      closeOnApply: true,//\"적용\" 버튼을 클릭했을 때 필터 UI를 닫도록 설정합니다. 사용자가 필터를 적용한 후 UI가 자동으로 닫히게 됩니다.\r\n    };\r\n\r\n\r\n    //열의 너비 자동 조절 전략을 설정합니다.\r\n    //각 열의 셀 내용에 맞춰 열의 너비를 자동으로 조절하도록 설정합니다. 즉, 셀의 내용이 잘리지 않도록 열 크기를 조정합니다.\r\n    const gridOptions = {\r\n      autoSizeStrategy: {\r\n        type: 'fitCellContents',\r\n      },\r\n      localeText: {// 필터 관련 텍스트를 한글로 변경\r\n        contains: '포함',\r\n        notContains: '포함하지 않음',\r\n        equals: '같음',\r\n        notEqual: '같지 않음',\r\n        startsWith: '시작하는',\r\n        endsWith: '끝나는',\r\n        blank: '비어 있음',\r\n        notBlank: '비어 있지 않음',\r\n        empty: '하나를 선택',\r\n        //숫자필터 관련\r\n        greaterThanOrEqual: '이상',\r\n        lessThanOrEqual: '이하',\r\n        inRange: '범위 내',\r\n      },\r\n    };\r\n\r\n    //columnDefs는 Vue의 반응형 객체로, AG Grid에서 사용할 열(column)의 정의 목록입니다. 각 열은 객체로 정의되어 있습니다.\r\n    const columnDefs = ref([\r\n      //headerName: 열의 헤더에 표시될 이름입니다.\r\n      //field: 데이터의 어떤 필드를 이 열과 연결할지를 지정합니다. 이 필드는 데이터 소스에서 가져온 객체의 키입니다.\r\n      //minWidth: 열의 최소 너비를 설정합니다. 이 값보다 작아지지 않도록 보장합니다.\r\n      //checkboxSelection: 이 열에서 체크박스를 표시할지 여부를 결정합니다. 주로 선택 기능이 필요한 경우 사용됩니다.\r\n      //headerCheckboxSelection: 헤더에 체크박스를 추가하여 전체 선택/해제를 가능하게 합니다.\r\n      //filter: 이 열에서 사용할 필터링 방법을 지정합니다. 예를 들어, \"agTextColumnFilter\"는 텍스트 기반 필터를 사용합니다.\r\n      //filterParams: 필터의 추가 설정을 위한 매개변수입니다.\r\n      // { headerName: '개발자번호', field: \"DEV_NO\", minWidth: 170, checkboxSelection: true, headerCheckboxSelection: true },\r\n      { headerName: '선택', checkboxSelection: true, minWidth: 100, filter: false, cellClass: 'checkboxCentered'},\r\n      { headerName: '이름', field: \"NM\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '프로젝트투입상태', field: \"PJ_INP_STTS\", minWidth: 200,filter: \"agTextColumnFilter\",\r\n        filterParams: { buttons: [\"reset\", \"apply\"] },},\r\n      { headerName: '계약횟수', field: \"CTRT_NMTM\", minWidth: 140, filter: \"agNumberColumnFilter\",filterParams: numberFilterParams},\r\n      { headerName: '생년월일', field: \"BRDT\", minWidth: 140, filter: \"agNumberColumnFilter\",filterParams: numberFilterParams},\r\n      { headerName: '나이', field: \"AGE\", minWidth: 100, filter: \"agNumberColumnFilter\",filterParams: numberFilterParams},\r\n      { headerName: '학력', field: \"ACBG\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '성별', field: \"GNDR\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '직위', field: \"JBPS\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '등급', field: \"GRD\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '총경력기간', field: \"T_CR_PER\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '지역', field: \"RGN\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '휴대전화번호', field: \"MBL_TELNO\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '이메일', field: \"EML\", minWidth: 120, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '컨택방법', field: \"CONTT_MTHD\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '인터뷰요청일', field: \"NTRV_DMND_DT\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '투입가능일', field: \"INP_PSBLTY_DT\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '소속회사', field: \"OGDP_CO\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '일련번호', field: \"SN\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '3.3%여부', field: \"WHTAX_YN\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '사업자여부', field: \"BZMN_YN\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '자사정규직여부', field: \"KDS_EMP_YN\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계약회사정규직여부', field: \"CTRT_CO_EMP_YN\", minWidth: 210, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '대금수령날짜', field: \"CLCT_PICKUP_DT\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '지급일자', field: \"GIVE_DT\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '은행', field: \"BANK\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계좌번호', field: \"ACTNO\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '부서', field: \"DEPT\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '월요청단가', field: \"MM_DMND_UNTPRC\", minWidth: 170, filter: \"agNumberColumnFilter\",filterParams: numberFilterParams},\r\n      { headerName: '주소', field: \"ADDR\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '직책', field: \"JBTTL\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '소개자', field: \"BRKR\", minWidth: 120, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '카카오톡닉네임', field: \"KAKAO_NICK\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계약이력존재여부', field: \"CTRT_HSTRY_YN\", minWidth: 200, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '병역', field: \"MS\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '기종', field: \"MDL\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '운영체제', field: \"OS\", minWidth: 140, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '언어', field: \"LANG\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '데이터베이스', field: \"DB\", minWidth: 190, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '툴', field: \"TOOL\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '프레임워크', field: \"FRMW\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '라이브러리', field: \"LBRR\", minWidth: 170, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '통신', field: \"CMNCT\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '기타', field: \"ETC\", minWidth: 100, filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n    ]);\r\n    console.log('columnDefs.value : ',columnDefs.value);\r\n    const rowSelection = ref(\"multiple\");\r\n    const rowData = ref([]);\r\n    // const currentlyActiveFilterModel = ref([]);\r\n\r\n    const getCurrentFilterModel = () => {\r\n      if (gridApi.value) {\r\n        return gridApi.value.getFilterModel(); // filterModel을 반환\r\n      }\r\n    };\r\n\r\n\r\n    const onGridReady = async (params) => {\r\n      gridApi.value = params.api;\r\n\r\n      // Grid가 준비된 이후에 자식 요소를 추가합니다.\r\n      // ag-paging-panel 클래스를 가진 요소를 찾습니다.\r\n      const pagingPanel = document.querySelector('.ag-paging-panel');\r\n      if (pagingPanel) {\r\n        const editRows = document.createElement(\"span\");\r\n        editRows.textContent = \"수정\"; // span의 텍스트 설정\r\n        editRows.style.cursor = \"pointer\"; // 커서 스타일 설정\r\n        editRows.style.marginLeft = \"10px\"; // 여백 추가\r\n\r\n        // 클릭 이벤트 추가\r\n        editRows.onclick = () => {\r\n          console.log(\"수정 버튼 클릭됨\");\r\n          // 수정 작업을 수행할 수 있습니다.\r\n        };\r\n\r\n        const firstChild = pagingPanel.firstChild;\r\n        pagingPanel.insertAfter(editRows, firstChild); // span을 첫 번째 자식 앞에 삽입\r\n        const deleteRows = document.createElement(\"span\");\r\n        deleteRows.textContent = \"삭제\"; // span의 텍스트 설정\r\n        deleteRows.style.cursor = \"pointer\"; // 커서 스타일 설정\r\n        deleteRows.style.marginLeft = \"10px\"; // 여백 추가\r\n\r\n        // 클릭 이벤트 추가\r\n        deleteRows.onclick = () => {\r\n          console.log(\"삭제 버튼 클릭됨\");\r\n          // 수정 작업을 수행할 수 있습니다.\r\n        };\r\n\r\n        pagingPanel.insertAfter(deleteRows, firstChild); // span을 첫 번째 자식 앞에 삽입\r\n      }\r\n      eventbus.SearchResultEvent.add('search', fetchData);\r\n      eventbus.SearchResultEvent.add('removeFilter', removeFilter);\r\n      params.api.addEventListener('filterChanged', onFilterChanged);\r\n    };\r\n    const previousFilterKeys = ref([]); // 이전 필터 모델 키 저장\r\n\r\n    const filterModel = ref([]);\r\n    const onFilterChanged = async (params) => {\r\n      const filterModels = gridApi.value.getFilterModel();\r\n      const filterModelKeys = Object.keys(filterModels);\r\n\r\n      console.log('Current Filter Model:', filterModels);\r\n      console.log('filterModel : ', filterModelKeys);\r\n\r\n      // 현재 필터 모델에서 이전 필터 키와 비교하여 해제된 필터 찾기\r\n      previousFilterKeys.value.forEach((key) => {\r\n        if (!filterModelKeys.includes(key)) {\r\n          console.log(`${key} 필터가 해제되었습니다!`);\r\n          eventbus.SearchResultEvent.removeFilter(key); // 해제된 필터에 대한 버튼 삭제\r\n        }\r\n      });\r\n\r\n      // 현재 필터 모델 키를 이전 필터 모델 키로 업데이트\r\n      previousFilterKeys.value = filterModelKeys;\r\n\r\n      filterModel.value = getCurrentFilterModel();\r\n      // console.log(filterModel.value);\r\n\r\n      Object.keys(filterModel.value).forEach(key => {\r\n        const filterObject = filterModel.value[key];\r\n        // console.log(`필터 키: ${key}, 필터 객체:`, filterObject);\r\n\r\n        // 이미 추가된 필터는 검증하지 않도록 조건 변경\r\n        // if (filterObject?.conditions && filterObject.conditions.length > 0) {\r\n        if (filterObject?.conditions) {\r\n          // const filtersToRemove = [];\r\n\r\n          const currentCondition = filterObject.conditions[0];\r\n          const currentCondition1 = filterObject.conditions[1];\r\n\r\n          // const isFilterRegistered = eventbus.SearchResultEvent.getRegisteredFilters().some(registeredFilter =>\r\n          //     registeredFilter.filter === currentCondition.filter && registeredFilter.type === currentCondition.type\r\n          // );\r\n          // const isFilterRegistered1 = eventbus.SearchResultEvent.getRegisteredFilters().some(registeredFilter =>\r\n          //     registeredFilter.filter === currentCondition1.filter && registeredFilter.type === currentCondition1.type\r\n          // );\r\n\r\n          if (currentCondition.filter === currentCondition1.filter && currentCondition.type === currentCondition1.type) {\r\n            alert(currentCondition+' 와 '+currentCondition1+' 의 필터값이 같습니다.');\r\n            // console.log(eventbus.getRegisteredFilters());\r\n            console.log(key, ',1 필터값: ',currentCondition1.type,',1 필터값: ',currentCondition1.filter);\r\n            console.log(key, ',필터값: ',currentCondition.type,',필터값: ',currentCondition.filter);\r\n\r\n          }else{\r\n            eventbus.SearchResultEvent.filterUpdate(key, currentCondition.type, currentCondition.filter);\r\n            eventbus.SearchResultEvent.filterUpdate(key, currentCondition1.type, currentCondition1.filter);\r\n\r\n          }\r\n\r\n          console.log(filterObject);\r\n          // AG Grid에 필터 모델 업데이트\r\n          const updatedFilterModel = { ...filterModel.value }; // 깊은 복사\r\n          params.api.setFilterModel(updatedFilterModel);\r\n          console.log('업데이트된 필터 모델:', updatedFilterModel);\r\n        } else {//필터 한개 등록 시\r\n          // const isFilterRegistered = eventbus.SearchResultEvent.getRegisteredFilters().some(registeredFilter =>\r\n          //     registeredFilter.filter === filterObject.filter && registeredFilter.type === filterObject.type\r\n          // );\r\n          //\r\n          // if (!isFilterRegistered) { // 등록되지 않은 필터인 경우\r\n          eventbus.SearchResultEvent.filterUpdate(key, filterModel.value[key].type, filterModel.value[key].filter);\r\n\r\n          // }\r\n        }\r\n      });\r\n    };\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/data');\r\n        const data = await response.json();\r\n\r\n        const translatedData = data.result.row.map(item => ({\r\n          DEV_NO: item.DEV_NO, // 개발자번호\r\n          NM: item.NM, // 이름\r\n          PJ_INP_STTS: item.PJ_INP_STTS, // 프로젝트투입상태\r\n          CTRT_NMTM: item.CTRT_NMTM, // 계약횟수\r\n          BRDT: item.BRDT, // 생년월일\r\n          GNDR: item.GNDR, // 성별\r\n          JBPS: item.JBPS, // 직위\r\n          GRD: item.GRD, // 등급\r\n          T_CR_PER: item.T_CR_PER, // 총경력기간\r\n          RGN: item.RGN, // 지역\r\n          MBL_TELNO: item.MBL_TELNO, // 휴대전화번호\r\n          EML: item.EML, // 이메일\r\n          CONTT_MTHD: item.CONTT_MTHD, // 컨택방법\r\n          NTRV_DMND_DT: item.NTRV_DMND_DT, // 인터뷰요청일\r\n          INP_PSBLTY_DT: item.INP_PSBLTY_DT, // 투입가능일\r\n          OGDP_CO: item.OGDP_CO, // 소속회사\r\n          SN: item.SN, // 일련번호\r\n          WHTAX_YN: item.WHTAX_YN, // 3.3%여부\r\n          BZMN_YN: item.BZMN_YN, // 사업자여부\r\n          KDS_EMP_YN: item.KDS_EMP_YN, // 자사정규직여부\r\n          CTRT_CO_EMP_YN: item.CTRT_CO_EMP_YN, // 계약회사정규직여부\r\n          CLCT_PICKUP_DT: item.CLCT_PICKUP_DT, // 대금수령날짜\r\n          GIVE_DT: item.GIVE_DT, // 지급일자\r\n          BANK: item.BANK, // 은행\r\n          ACTNO: item.ACTNO, // 계좌번호\r\n          DEPT: item.DEPT, // 부서\r\n          MM_DMND_UNTPRC: item.MM_DMND_UNTPRC, // 월요청단가\r\n          ADDR: item.ADDR, // 주소\r\n          JBTTL: item.JBTTL, // 직책\r\n          BRKR: item.BRKR, // 소개자\r\n          KAKAO_NICK: item.KAKAO_NICK, // 카카오톡닉네임\r\n          CTRT_HSTRY_YN: item.CTRT_HSTRY_YN, // 계약이력존재여부\r\n          MS: item.MS, // 병역\r\n          MDL: item.MDL, // 모델\r\n          OS: item.OS, // 운영 체제\r\n          LANG: item.LANG, // 언어\r\n          DB: item.DB, // 데이터베이스\r\n          TOOL: item.TOOL, // 툴\r\n          FRMW: item.FRMW, // 프레임워크\r\n          LBRR: item.LBRR, // 라이브러리\r\n          CMNCT: item.CMNCT, // 통신\r\n          ETC: item.ETC, // 기타\r\n          AGE: item.AGE, // 나이\r\n          ACBG: item.ACBG // 학력\r\n        }));\r\n        rowData.value = translatedData;\r\n        gridApi.value.refreshCells();\r\n      } catch (error) {\r\n        console.error('데이터 로드 오류:', error);\r\n        rowData.value = [];\r\n      }\r\n    };\r\n\r\n    // 셀의 값이 변경될 때 호출되는 함수\r\n    const onCellValueChanged = async (event) => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/updateData', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(event.data),\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Failed to update data');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating data:', error);\r\n      }\r\n    };\r\n\r\n    //--- 필터초기화 시작 ---//\r\n    const resetFilter = () => {\r\n      gridApi.value.setFilterModel(null);\r\n      // eventbus.SearchResultEvent.removeFilter(null);\r\n    };\r\n    const removeFilter = (keyName) => {\r\n      const filterModel = gridApi.value.getFilterModel(); // 현재 필터 모델 가져오기\r\n      console.log('현재 필터 모델:', filterModel); // 필터 모델 출력\r\n\r\n      if (filterModel[keyName]) {\r\n        delete filterModel[keyName]; // 특정 필터 제거\r\n        gridApi.value.setFilterModel(filterModel); // 업데이트된 필터 모델 설정\r\n        console.log(`필터 '${keyName}'이(가) 제거되었습니다.`);\r\n      } else {\r\n        console.log(`필터 '${keyName}'이(가) 적용되지 않았습니다.`);\r\n      }\r\n    };\r\n    // 이벤트 등록\r\n    eventbus.SearchResultEvent.add('reset', resetFilter);\r\n    //--- 필터초기화 끝 ---//\r\n    //--- 선택된 행 삭제 시작 ---//\r\n    const deleteRowBtnClick = async () => {\r\n      const selectedNodes = gridApi.value.getSelectedNodes();\r\n      const selectedData = selectedNodes.map(node => node.data);\r\n\r\n      // 삭제할 개발자번호 목록\r\n      const devNoList = selectedData.map(row => row.DEV_NO);\r\n\r\n      // 서버에 DELETE 요청 보내기\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/deleteData', {\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ devNoList }), // 개발자번호 배열 전송\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to delete data');\r\n        }\r\n\r\n        // 서버에서 삭제가 완료되면 로컬 데이터 갱신\r\n        rowData.value = rowData.value.filter(row => !devNoList.includes(row.DEV_NO));\r\n\r\n        // 선택된 행 삭제 후 그리드 업데이트\r\n        // gridApi.value.setRowData(rowData.value);\r\n      } catch (error) {\r\n        console.error('Error deleting data:', error);\r\n        alert(\"삭제할 개발자를 선택해주세요.\");\r\n      }\r\n    };\r\n    // 이벤트 등록\r\n    eventbus.SearchResultEvent.add('deleteRow', deleteRowBtnClick);\r\n    //--- 선택된 행 삭제 끝 ---//\r\n\r\n\r\n\r\n\r\n    return {\r\n      columnDefs,\r\n      gridApi,\r\n      defaultColDef,\r\n      rowSelection,\r\n      rowData,\r\n      gridOptions,\r\n      onGridReady,\r\n      onCellValueChanged,\r\n      deleteRowBtnClick,\r\n      resetFilter,\r\n      removeFilter,\r\n      getCurrentFilterModel,\r\n      textFilterParams,\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style>\r\n@import \"ag-grid-community/styles/ag-grid.css\";\r\n@import \"ag-grid-community/styles/ag-theme-quartz.css\";\r\n\r\n.centered {\r\n  .ag-header-cell-label {\r\n    justify-content: center !important;\r\n  }\r\n}\r\n\r\n.headerColor{\r\n  background-color: #e8e8e8 !important;\r\n}\r\n\r\n.checkboxCentered {\r\n  display: flex; /* Flexbox를 사용하여 중앙 정렬 */\r\n  justify-content: center; /* 가로 중앙 정렬 */\r\n  align-items: center; /* 세로 중앙 정렬 */\r\n}\r\n\r\n.pl10{\r\n  padding-left: 10px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}