{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, withModifiers as _withModifiers, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2b92bcc5\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.buttons, (button, index) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: index,\n      class: \"btn filterBtn\"\n    }, [_createTextVNode(_toDisplayString(button.keyName) + \": \" + _toDisplayString(button.filter) + \" \" + _toDisplayString(button.type) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", {\n      class: \"remove-btn\",\n      onClick: _withModifiers($event => $setup.removeButton(index), [\"stop\"])\n    }, \"X\", 8 /* PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","$setup","buttons","button","index","key","class","_createTextVNode","_toDisplayString","keyName","filter","type","_createElementVNode","onClick","_withModifiers","$event","removeButton","_hoisted_1"],"sources":["C:\\Users\\User\\.intelij\\payinfo\\frontend\\src\\components\\common\\SearchFilterBtnComponent.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted } from 'vue';\nimport eventbus from '@/eventbus/eventbus';\n\nconst buttons = ref([]);\n\nconst updateButtonData = (keyName, type, filter) => {\n  buttons.value.push({ keyName, type, filter });\n}\n\nconst resetButtons = () => {\n  buttons.value.forEach(button => {\n    eventbus.SearchResultEvent.removeFilter(button.type, button.filter);\n  });\n  buttons.value.splice(0, buttons.value.length); // 배열 초기화\n  console.log('초기화 버튼결과값:',buttons.value);\n}\n\nconst removeButton = (index) => {\n  const button = buttons.value[index];\n  if (button) {\n    eventbus.SearchResultEvent.removeFilter(button.type, button.filter); // 필터 제거 이벤트 발생\n  }\n  buttons.value.splice(index, 1); // 특정 인덱스의 버튼 삭제\n  console.log('삭제 버튼결과값:',buttons.value);\n};\n\n// 이벤트 리스너 등록\nonMounted(() => {\n  eventbus.SearchResultEvent.add('filterUpdate', updateButtonData);\n  eventbus.SearchResultEvent.add('resetButtons', resetButtons);\n});\n</script>\n\n<template>\n  <div>\n    <button v-for=\"(button, index) in buttons\" :key=\"index\" class=\"btn filterBtn\">\n      {{ button.keyName }}: {{ button.filter }} {{ button.type }}\n      <span class=\"remove-btn\" @click.stop=\"removeButton(index)\">X</span>\n    </button>\n  </div>\n</template>\n\n<style scoped>\n.filterBtn {\n  background-color: white;\n  border-radius: 20px;\n  margin: 5px;\n  border: 1px solid #b4c7dd;\n  position: relative; /* 상대 위치로 설정 */\n  padding-right: 20px; /* X 버튼 공간 확보 */\n}\n\n.remove-btn {\n  position: absolute; /* 절대 위치로 설정 */\n  right: 5px; /* 오른쪽 여백 */\n  top: 50%; /* 수직 중앙 정렬 */\n  transform: translateY(-50%); /* 중앙 정렬 보정 */\n  cursor: pointer; /* 커서 모양 변경 */\n  color: red; /* X 버튼 색상 */\n}\n</style>"],"mappings":";;mBAAA;;uBAmCEA,mBAAA,CAKM,e,kBAJJA,mBAAA,CAGSC,SAAA,QAvCbC,WAAA,CAoCsCC,MAAA,CAAAC,OAAO,EApC7C,CAoCoBC,MAAM,EAAEC,KAAK;yBAA7BN,mBAAA,CAGS;MAHmCO,GAAG,EAAED,KAAK;MAAEE,KAAK,EAAC;QApClEC,gBAAA,CAAAC,gBAAA,CAqCSL,MAAM,CAACM,OAAO,IAAG,IAAE,GAAAD,gBAAA,CAAGL,MAAM,CAACO,MAAM,IAAG,GAAC,GAAAF,gBAAA,CAAGL,MAAM,CAACQ,IAAI,IAAG,GAC3D,iBAAAC,mBAAA,CAAmE;MAA7DN,KAAK,EAAC,YAAY;MAAEO,OAAK,EAtCrCC,cAAA,CAAAC,MAAA,IAsC4Cd,MAAA,CAAAe,YAAY,CAACZ,KAAK;OAAG,GAAC,iBAtClEa,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}