{"ast":null,"code":"import { ref } from 'vue';\nimport { AgGridVue } from \"ag-grid-vue3\"; // Vue Data Grid Component\n\nexport default {\n  name: \"App\",\n  components: {\n    AgGridVue\n  },\n  setup() {\n    const gridApi = ref(null); // grid API 선언\n    const gridOptions = ref({\n      rowModelType: 'infinite',\n      datasource: null,\n      columnDefs: [{\n        headerName: \"ID\",\n        maxWidth: 100,\n        valueGetter: \"node.id\",\n        cellRenderer: params => {\n          if (params.value !== undefined) {\n            return params.value;\n          } else {\n            return '<img src=\"https://www.ag-grid.com/example-assets/loading.gif\">';\n          }\n        }\n      }, {\n        field: \"athlete\",\n        minWidth: 150\n      }, {\n        field: \"age\"\n      }, {\n        field: \"country\",\n        minWidth: 150\n      }, {\n        field: \"year\"\n      }, {\n        field: \"date\",\n        minWidth: 150\n      }, {\n        field: \"sport\",\n        minWidth: 150\n      }, {\n        field: \"gold\"\n      }, {\n        field: \"silver\"\n      }, {\n        field: \"bronze\"\n      }, {\n        field: \"total\"\n      }],\n      defaultColDef: {\n        flex: 1,\n        minWidth: 100,\n        sortable: false\n      },\n      rowBuffer: 0,\n      rowSelection: \"multiple\",\n      cacheBlockSize: 100,\n      maxConcurrentDatasourceRequests: 1,\n      infiniteInitialRowCount: 1000,\n      maxBlocksInCache: 10\n    });\n\n    // 데이터 소스 설정\n    const myDataSource = {\n      rowCount: undefined,\n      // behave as infinite scroll\n\n      getRows: params => {\n        console.log(\"Requesting rows from \" + params.startRow + \" to \" + params.endRow);\n\n        // 서버에서 데이터를 요청\n        fetch(`https://www.ag-grid.com/example-assets/olympic-winners.json`).then(response => response.json()).then(data => {\n          // 실제 데이터에 맞게 paging 처리\n          const rowsThisPage = data.slice(params.startRow, params.endRow);\n          let lastRow = -1;\n          if (data.length <= params.endRow) {\n            lastRow = data.length;\n          }\n          params.successCallback(rowsThisPage, lastRow);\n        }).catch(error => {\n          console.error('Error fetching data:', error);\n          params.failCallback();\n        });\n      }\n    };\n\n    // 그리드가 초기화되기 전에 기본 설정\n    gridOptions.value.datasource = myDataSource;\n\n    // 그리드 초기화 후에 데이터 소스를 설정하는 메서드\n    const onGridReady = params => {\n      gridApi.value = params.api; // gridApi 저장\n      params.api.setDatasource(myDataSource);\n    };\n    return {\n      gridOptions,\n      onGridReady\n    };\n  }\n};","map":{"version":3,"names":["ref","AgGridVue","name","components","setup","gridApi","gridOptions","rowModelType","datasource","columnDefs","headerName","maxWidth","valueGetter","cellRenderer","params","value","undefined","field","minWidth","defaultColDef","flex","sortable","rowBuffer","rowSelection","cacheBlockSize","maxConcurrentDatasourceRequests","infiniteInitialRowCount","maxBlocksInCache","myDataSource","rowCount","getRows","console","log","startRow","endRow","fetch","then","response","json","data","rowsThisPage","slice","lastRow","length","successCallback","catch","error","failCallback","onGridReady","api","setDatasource"],"sources":["C:\\Users\\손승연\\IdeaProjects\\payinfo\\frontend\\src\\components\\PjInq\\SearchResultComponent.vue"],"sourcesContent":["===========================================================================\r\n                        SearchResultComponent.vue\r\n===========================================================================\r\n===========================================================================\r\n                                템플릿 시작\r\n===========================================================================\r\n<template>\r\n  <div class=\"ag-theme-quartz search__result\" style=\"width: 100%; height: 90%;\">\r\n    <ag-grid-vue\r\n        class=\"search__result__data\"\r\n        style=\"width: 100%; height: 100%;\"\r\n        :columnDefs=\"colDefs\"\r\n        :gridOptions=\"gridOptions\"\r\n        @grid-ready=\"onGridReady\"\r\n    />\r\n  </div>\r\n</template>\r\n===========================================================================\r\n                                템플릿 종료\r\n===========================================================================\r\n                                스크립트 시작\r\n===========================================================================\r\n<script>\r\nimport { ref } from 'vue';\r\nimport { AgGridVue } from \"ag-grid-vue3\"; // Vue Data Grid Component\r\n\r\nexport default {\r\n  name: \"App\",\r\n  components: {\r\n    AgGridVue,\r\n  },\r\n  setup() {\r\n    const gridApi = ref(null); // grid API 선언\r\n    const gridOptions = ref({\r\n      rowModelType: 'infinite',\r\n      datasource: null,\r\n      columnDefs: [\r\n        {\r\n          headerName: \"ID\",\r\n          maxWidth: 100,\r\n          valueGetter: \"node.id\",\r\n          cellRenderer: (params) => {\r\n            if (params.value !== undefined) {\r\n              return params.value;\r\n            } else {\r\n              return '<img src=\"https://www.ag-grid.com/example-assets/loading.gif\">';\r\n            }\r\n          },\r\n        },\r\n        { field: \"athlete\", minWidth: 150 },\r\n        { field: \"age\" },\r\n        { field: \"country\", minWidth: 150 },\r\n        { field: \"year\" },\r\n        { field: \"date\", minWidth: 150 },\r\n        { field: \"sport\", minWidth: 150 },\r\n        { field: \"gold\" },\r\n        { field: \"silver\" },\r\n        { field: \"bronze\" },\r\n        { field: \"total\" },\r\n      ],\r\n      defaultColDef: {\r\n        flex: 1,\r\n        minWidth: 100,\r\n        sortable: false,\r\n      },\r\n      rowBuffer: 0,\r\n      rowSelection: \"multiple\",\r\n      cacheBlockSize: 100,\r\n      maxConcurrentDatasourceRequests: 1,\r\n      infiniteInitialRowCount: 1000,\r\n      maxBlocksInCache: 10,\r\n    });\r\n\r\n    // 데이터 소스 설정\r\n    const myDataSource = {\r\n      rowCount: undefined, // behave as infinite scroll\r\n\r\n      getRows: (params) => {\r\n        console.log(\"Requesting rows from \" + params.startRow + \" to \" + params.endRow);\r\n\r\n        // 서버에서 데이터를 요청\r\n        fetch(`https://www.ag-grid.com/example-assets/olympic-winners.json`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              // 실제 데이터에 맞게 paging 처리\r\n              const rowsThisPage = data.slice(params.startRow, params.endRow);\r\n              let lastRow = -1;\r\n              if (data.length <= params.endRow) {\r\n                lastRow = data.length;\r\n              }\r\n              params.successCallback(rowsThisPage, lastRow);\r\n            })\r\n            .catch(error => {\r\n              console.error('Error fetching data:', error);\r\n              params.failCallback();\r\n            });\r\n      },\r\n    };\r\n\r\n    // 그리드가 초기화되기 전에 기본 설정\r\n    gridOptions.value.datasource = myDataSource;\r\n\r\n    // 그리드 초기화 후에 데이터 소스를 설정하는 메서드\r\n    const onGridReady = (params) => {\r\n      gridApi.value = params.api; // gridApi 저장\r\n      params.api.setDatasource(myDataSource);\r\n    };\r\n\r\n    return {\r\n      gridOptions,\r\n      onGridReady,\r\n    };\r\n  },\r\n};\r\n</script>\r\n===========================================================================\r\n                                스크립트 종료\r\n===========================================================================\r\n                                스타일 시작\r\n===========================================================================\r\n<style>\r\n@import \"ag-grid-community/styles/ag-grid.css\";\r\n@import \"ag-grid-community/styles/ag-theme-quartz.css\";\r\n.search__result{\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}