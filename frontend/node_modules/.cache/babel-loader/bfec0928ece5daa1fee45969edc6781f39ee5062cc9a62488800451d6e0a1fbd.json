{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, withModifiers as _withModifiers, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2b92bcc5\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.buttons, (button, index) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: index,\n      class: \"btn filterBtn\"\n    }, [_createTextVNode(_toDisplayString(button.type) + \": \" + _toDisplayString(button.filter) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", {\n      class: \"close-btn\",\n      onClick: _withModifiers($event => $setup.removeFilter(index), [\"stop\"])\n    }, \"X\", 8 /* PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","$setup","buttons","button","index","key","class","_createTextVNode","_toDisplayString","type","filter","_createElementVNode","onClick","_withModifiers","$event","removeFilter","_hoisted_1"],"sources":["C:\\Users\\User\\.intelij\\payinfo\\frontend\\src\\components\\common\\SearchFilterBtnComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <button v-for=\"(button, index) in buttons\" :key=\"index\" class=\"btn filterBtn\">\n      {{ button.type }}: {{ button.filter }}\n      <span class=\"close-btn\" @click.stop=\"removeFilter(index)\">X</span>\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport eventbus from '@/eventbus/eventbus';\n\nconst buttons = ref([]);\n\nconst updateButtonData = (type, filter) => {\n  if (type && filter) {\n    buttons.value.push({ type, filter });\n  }\n};\n\nconst resetButtons = () => {\n  buttons.value = []; // 버튼 목록 초기화\n};\n\n// 필터 제거 함수\nconst removeFilter = (index) => {\n  const { type, filter } = buttons.value[index];\n  buttons.value.splice(index, 1); // 버튼 목록에서 제거\n\n  // ag-grid의 필터 해제\n  eventbus.SearchResultEvent.filterUpdate(type, null); // 필터 업데이트 이벤트 발송\n\n  // 필터에 대한 해제 로직 추가\n  const filterModel = {}; // 필터 모델 초기화\n  filterModel[type] = null; // 해당 필터 제거\n  eventbus.SearchResultEvent.resetFilter(filterModel); // 필터 모델 적용\n};\n\n// 이벤트 리스너 등록\nonMounted(() => {\n  eventbus.SearchResultEvent.add('filterUpdate', updateButtonData);\n  eventbus.SearchResultEvent.add('resetButtons', resetButtons); // resetButtons 이벤트 리스너 등록\n});\n</script>\n\n<style scoped>\n.filterBtn {\n  background-color: white;\n  border-radius: 20px;\n  margin: 5px; /* 버튼 사이에 간격 추가 */\n  border: 1px solid #b4c7dd;\n  position: relative; /* X 버튼 위치 조정을 위한 relative 설정 */\n}\n\n.close-btn {\n  cursor: pointer;\n  color: red;\n  margin-left: 5px; /* X와 텍스트 사이 간격 */\n  font-weight: bold;\n}\n</style>"],"mappings":";;mBAAA;;uBACEA,mBAAA,CAKM,e,kBAJJA,mBAAA,CAGSC,SAAA,QALbC,WAAA,CAEsCC,MAAA,CAAAC,OAAO,EAF7C,CAEoBC,MAAM,EAAEC,KAAK;yBAA7BN,mBAAA,CAGS;MAHmCO,GAAG,EAAED,KAAK;MAAEE,KAAK,EAAC;QAFlEC,gBAAA,CAAAC,gBAAA,CAGSL,MAAM,CAACM,IAAI,IAAG,IAAE,GAAAD,gBAAA,CAAGL,MAAM,CAACO,MAAM,IAAG,GACtC,iBAAAC,mBAAA,CAAkE;MAA5DL,KAAK,EAAC,WAAW;MAAEM,OAAK,EAJpCC,cAAA,CAAAC,MAAA,IAI2Cb,MAAA,CAAAc,YAAY,CAACX,KAAK;OAAG,GAAC,iBAJjEY,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}