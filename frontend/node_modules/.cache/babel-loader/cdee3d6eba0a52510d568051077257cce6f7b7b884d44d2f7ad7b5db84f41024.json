{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, withModifiers as _withModifiers, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2b92bcc5\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.buttons, (button, index) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: index,\n      class: \"btn filterBtn\"\n    }, [_createTextVNode(_toDisplayString(button.keyName) + \": \" + _toDisplayString(button.filter) + \" \" + _toDisplayString(button.type) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", {\n      class: \"remove-btn\",\n      onClick: _withModifiers($event => $setup.removeButton(index), [\"stop\"])\n    }, \"X\", 8 /* PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","$setup","buttons","button","index","key","class","_createTextVNode","_toDisplayString","keyName","filter","type","_createElementVNode","onClick","_withModifiers","$event","removeButton","_hoisted_1"],"sources":["C:\\Users\\손승연\\IdeaProjects\\payinfo\\frontend\\src\\components\\common\\SearchFilterBtnComponent.vue"],"sourcesContent":["<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport eventbus from '@/eventbus/eventbus';\r\n\r\n// 필터 타입에 대한 한글 매핑\r\nconst filterTypeMap = {\r\n  contains: '포함',\r\n  notContains: '포함하지 않음',\r\n  equals: '같음',\r\n  notEqual: '같지 않음',\r\n  startsWith: '시작하는',\r\n  endsWith: '끝나는',\r\n  //숫자필터 관련\r\n  greaterThanOrEqual: '이상',\r\n  lessThanOrEqual: '이하',\r\n  inRange: '범위 내',\r\n};\r\n\r\n// 필드 이름에 대한 한글 매핑\r\nconst fieldNameMap = {\r\n  NM: '이름',\r\n  AGE: '나이',\r\n  PJ_INP_STTS: '프로젝트투입상태',\r\n  CTRT_NMTM: '계약횟수',\r\n  BRDT: '생년월일',\r\n  GNDR: '성별',\r\n  JBPS: '직위',\r\n  GRD: '등급',\r\n  T_CR_PER: '총경력기간',\r\n  RGN: '지역',\r\n  MBL_TELNO: '휴대전화번호',\r\n  EML: '이메일',\r\n  CONTT_MTHD: '컨택방법',\r\n  NTRV_DMND_DT: '인터뷰요청일',\r\n  INP_PSBLTY_DT: '투입가능일',\r\n  OGDP_CO: '소속회사',\r\n  SN: '일련번호',\r\n  WHTAX_YN: '3.3%여부',\r\n  BZMN_YN: '사업자여부',\r\n  KDS_EMP_YN: '자사정규직여부',\r\n  CTRT_CO_EMP_YN: '계약회사정규직여부',\r\n  CLCT_PICKUP_DT: '대금수령날짜',\r\n  GIVE_DT: '지급일자',\r\n  BANK: '은행',\r\n  ACTNO: '계좌번호',\r\n  DEPT: '부서',\r\n  MM_DMND_UNTPRC: '월요청단가',\r\n  ADDR: '주소',\r\n  JBTTL: '직책',\r\n  BRKR: '소개자',\r\n  KAKAO_NICK: '카카오톡닉네임',\r\n  CTRT_HSTRY_YN: '계약이력존재여부',\r\n  MS: '병역',\r\n  MDL: '모델',\r\n  OS: '운영체제',\r\n  LANG: '언어',\r\n  DB: '데이터베이스',\r\n  TOOL: '툴',\r\n  FRMW: '프레임워크',\r\n  LBRR: '라이브러리',\r\n  CMNCT: '통신',\r\n  ETC: '기타',\r\n};\r\n\r\nconst buttons = ref([]);\r\n\r\nconst updateButtonData = (keyName, type, filter) => {\r\n  //filterTypeMap은 필터 타입을 한글로 매핑한 객체입니다. || type는 만약 filterTypeMap[type]가 undefined일 경우, 원래의 타입(type)을 그대로 사용하도록 합니다. 즉, 매핑된 값이 없으면 기본 타입을 사용합니다.\r\n  const displayType = filterTypeMap[type] || type;\r\n  const displayKeyName = fieldNameMap[keyName] || keyName;\r\n\r\n  //지금 추가하려는 버튼과 buttons의 값들을 비교하여 하나라도 중복된 값이 있는 경우\r\n  const isAlreadyRegistered = buttons.value.some(button =>\r\n      button.keyName === displayKeyName && button.filter === filter && button.type === displayType\r\n  );\r\n\r\n  //중복되지 않는 경우 필터를 버튼으로 추가한다. 중복되는 경우는 생략, 이미 필터값 검증 후 필터 중복 시 updateButtonData 실행되지 않음\r\n  if (!isAlreadyRegistered) {\r\n    buttons.value.push({ keyName: displayKeyName, type: displayType, filter });\r\n  }\r\n};\r\n\r\n\r\nconst resetButtons = () => {\r\n  // buttons.value.forEach(button => {\r\n  //   eventbus.SearchResultEvent.removeFilter(button.keyName, button.type, button.filter);\r\n  // });\r\n  buttons.value = []; // 모든 버튼 삭제\r\n  console.log('초기화');\r\n};\r\n\r\nconst removeButton = (index) => {\r\n  const button = buttons.value[index];\r\n\r\n  if (button) {\r\n    console.log('제거할 버튼 정보:', button); // 버튼 정보 출력\r\n\r\n    // 필드 이름 매핑을 통해 실제 필터 키로 변환\r\n    const actualKeyName = Object.keys(fieldNameMap).find(key => fieldNameMap[key] === button.keyName);\r\n\r\n    if (actualKeyName) {\r\n      // 필터 제거 요청: actualKeyName을 사용하여 필터 제거\r\n      eventbus.SearchResultEvent.removeFilter(actualKeyName, button.type, button.filter); // 필터 제거 이벤트 발생\r\n\r\n      // buttons 배열에서 해당 버튼 제거\r\n      buttons.value.splice(index, 1);\r\n\r\n      // 제거 후 상태 확인\r\n      console.log('남은 버튼들:', buttons.value); // 남은 버튼 확인\r\n    } else {\r\n      console.log(`필터 키 '${button.keyName}'에 대한 실제 키를 찾을 수 없습니다.`);\r\n    }\r\n  } else {\r\n    console.log('Invalid button index:', index);\r\n  }\r\n};\r\n// 필터 버튼 삭제 핸들러\r\nconst handleRemoveFilter = (keyName) => {\r\n  const buttonIndex = buttons.value.findIndex(button => button.keyName === fieldNameMap[keyName]);\r\n  if (buttonIndex !== -1) {\r\n    buttons.value.splice(buttonIndex, 1);\r\n    console.log(`버튼 '${keyName}' 삭제됨`);\r\n  }\r\n};\r\n\r\n// 이벤트 리스너 등록\r\nonMounted(() => {\r\n  eventbus.SearchResultEvent.add('filterUpdate', updateButtonData);\r\n  eventbus.SearchResultEvent.add('resetButtons', resetButtons); // resetButtons 이벤트 등록\r\n  eventbus.SearchResultEvent.add('removeFilter', handleRemoveFilter); // 버튼 삭제 핸들러 등록\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <button v-for=\"(button, index) in buttons\" :key=\"index\" class=\"btn filterBtn\">\r\n      {{ button.keyName }}: {{ button.filter }} {{ button.type }}\r\n      <span class=\"remove-btn\" @click.stop=\"removeButton(index)\">X</span>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.filterBtn {\r\n  background-color: white;\r\n  border-radius: 20px;\r\n  margin: 5px;\r\n  border: 1px solid #b4c7dd;\r\n  position: relative; /* 상대 위치로 설정 */\r\n  padding-right: 20px; /* X 버튼 공간 확보 */\r\n}\r\n\r\n.remove-btn {\r\n  position: absolute; /* 절대 위치로 설정 */\r\n  right: 5px; /* 오른쪽 여백 */\r\n  top: 50%; /* 수직 중앙 정렬 */\r\n  transform: translateY(-50%); /* 중앙 정렬 보정 */\r\n  cursor: pointer; /* 커서 모양 변경 */\r\n  color: red; /* X 버튼 색상 */\r\n}\r\n</style>"],"mappings":";;mBAAA;;uBAsIEA,mBAAA,CAKM,e,kBAJJA,mBAAA,CAGSC,SAAA,QA1IbC,WAAA,CAuIsCC,MAAA,CAAAC,OAAO,EAvI7C,CAuIoBC,MAAM,EAAEC,KAAK;yBAA7BN,mBAAA,CAGS;MAHmCO,GAAG,EAAED,KAAK;MAAEE,KAAK,EAAC;QAvIlEC,gBAAA,CAAAC,gBAAA,CAwISL,MAAM,CAACM,OAAO,IAAG,IAAE,GAAAD,gBAAA,CAAGL,MAAM,CAACO,MAAM,IAAG,GAAC,GAAAF,gBAAA,CAAGL,MAAM,CAACQ,IAAI,IAAG,GAC3D,iBAAAC,mBAAA,CAAmE;MAA7DN,KAAK,EAAC,YAAY;MAAEO,OAAK,EAzIrCC,cAAA,CAAAC,MAAA,IAyI4Cd,MAAA,CAAAe,YAAY,CAACZ,KAAK;OAAG,GAAC,iBAzIlEa,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}