{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ag-theme-quartz search-result pl10\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"98%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ag_grid_vue = _resolveComponent(\"ag-grid-vue\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_ag_grid_vue, {\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"100%\"\n    },\n    columnDefs: _ctx.columnDefs,\n    onGridReady: _ctx.onGridReady,\n    defaultColDef: _ctx.defaultColDef,\n    rowSelection: _ctx.rowSelection,\n    rowData: _ctx.rowData,\n    \"grid-options\": _ctx.gridOptions,\n    pagination: true,\n    onCellValueChanged: _ctx.onCellValueChanged\n  }, null, 8 /* PROPS */, [\"columnDefs\", \"onGridReady\", \"defaultColDef\", \"rowSelection\", \"rowData\", \"grid-options\", \"onCellValueChanged\"])]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_createVNode","_component_ag_grid_vue","columnDefs","_ctx","onGridReady","defaultColDef","rowSelection","rowData","gridOptions","pagination","onCellValueChanged"],"sources":["C:\\Users\\User\\.intelij\\payinfo\\frontend\\src\\components\\DevInq\\SearchResultComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"ag-theme-quartz search-result pl10\" style=\"width: 100%; height: 98%;\">\r\n    <ag-grid-vue\r\n        style=\"width: 100%; height: 100%;\"\r\n        :columnDefs=\"columnDefs\"\r\n        @grid-ready=\"onGridReady\"\r\n        :defaultColDef=\"defaultColDef\"\r\n        :rowSelection=\"rowSelection\"\r\n        :rowData=\"rowData\"\r\n        :grid-options=\"gridOptions\"\r\n        :pagination=\"true\"\r\n        @cell-value-changed=\"onCellValueChanged\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, ref, shallowRef} from \"vue\";\r\nimport { AgGridVue } from \"ag-grid-vue3\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\r\nimport eventbus from '@/eventbus/eventbus'\r\nexport default defineComponent({\r\n  components: {\r\n    \"ag-grid-vue\": AgGridVue,\r\n  },\r\n  setup() {\r\n    //--- 선택된 행 삭제 시작 ---//\r\n    const deleteRowBtnClick = async () => {\r\n      const selectedNodes = gridApi.value.getSelectedNodes();\r\n      const selectedData = selectedNodes.map(node => node.data);\r\n\r\n      // 삭제할 개발자번호 목록\r\n      const devNoList = selectedData.map(row => row.DEV_NO);\r\n\r\n      // 서버에 DELETE 요청 보내기\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/deleteData', {\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ devNoList }), // 개발자번호 배열 전송\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to delete data');\r\n        }\r\n\r\n        // 서버에서 삭제가 완료되면 로컬 데이터 갱신\r\n        rowData.value = rowData.value.filter(row => !devNoList.includes(row.DEV_NO));\r\n\r\n        // 선택된 행 삭제 후 그리드 업데이트\r\n        // gridApi.value.setRowData(rowData.value);\r\n      } catch (error) {\r\n        console.error('Error deleting data:', error);\r\n      }\r\n    };\r\n    // 이벤트 등록\r\n    eventbus.SearchResultEvent.add('deleteRow', deleteRowBtnClick);\r\n    //--- 선택된 행 삭제 끝 ---//\r\n\r\n    const textFilterParams ={\r\n      filterOptions: [\"contains\", \"notContains\"],\r\n      caseSensitive: false,\r\n      trimInput: true,\r\n      buttons: [\"cancel\", \"reset\", \"apply\"],\r\n      localeText: {\r\n        cancel: '취소',\r\n        reset: '초기화', // 필요에 따라 추가\r\n        apply: '적용', // 필요에 따라 추가\r\n      },\r\n      closeOnApply: true,\r\n    };\r\n\r\n    const gridOptions = {\r\n      autoSizeStrategy: {\r\n        type: 'fitCellContents',\r\n      },\r\n      localeText: {\r\n        // 필터 관련 텍스트를 한글로 변경\r\n        contains: '포함',\r\n        notContains: '포함하지 않음',\r\n        equals: '같음',\r\n        notEqual: '같지 않음',\r\n        startsWith: '시작하는',\r\n        endsWith: '끝나는',\r\n        blank: '비어 있음',\r\n        notBlank: '비어 있지 않음',\r\n        empty: '하나를 선택',\r\n      },\r\n    };\r\n\r\n    const columnDefs = ref([\r\n      { headerName: '개발자번호', field: \"DEV_NO\", minWidth: 170, checkboxSelection: true, headerCheckboxSelection: true },\r\n      { headerName: '이름', field: \"NM\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '프로젝트투입상태', field: \"PJ_INP_STTS\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계약횟수', field: \"CTRT_NMTM\" },\r\n      { headerName: '생년월일', field: \"BRDT\" },\r\n      { headerName: '나이', field: \"AGE\" },\r\n      { headerName: '학력', field: \"ACBG\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '성별', field: \"GNDR\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '직위', field: \"JBPS\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '등급', field: \"GRD\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '총경력기간', field: \"T_CR_PER\" },\r\n      { headerName: '지역', field: \"RGN\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '휴대전화번호', field: \"MBL_TELNO\" },\r\n      { headerName: '이메일', field: \"EML\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '컨택방법', field: \"CONTT_MTHD\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '인터뷰요청일', field: \"NTRV_DMND_DT\" },\r\n      { headerName: '투입가능일', field: \"INP_PSBLTY_DT\" },\r\n      { headerName: '소속회사', field: \"OGDP_CO\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '일련번호', field: \"SN\" },\r\n      { headerName: '3.3%여부', field: \"WHTAX_YN\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '사업자여부', field: \"BZMN_YN\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '자사정규직여부', field: \"KDS_EMP_YN\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계약회사정규직여부', field: \"CTRT_CO_EMP_YN\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '대금수령날짜', field: \"CLCT_PICKUP_DT\" },\r\n      { headerName: '지급일자', field: \"GIVE_DT\" },\r\n      { headerName: '은행', field: \"BANK\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계좌번호', field: \"ACTNO\" },\r\n      { headerName: '부서', field: \"DEPT\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '월요청단가', field: \"MM_DMND_UNTPRC\" },\r\n      { headerName: '주소', field: \"ADDR\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '직책', field: \"JBTTL\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '소개자', field: \"BRKR\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '카카오톡닉네임', field: \"KAKAO_NICK\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '계약이력존재여부', field: \"CTRT_HSTRY_YN\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '병역', field: \"MS\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '기종', field: \"MDL\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '운영체제', field: \"OS\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '언어', field: \"LANG\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '데이터베이스', field: \"DB\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '툴', field: \"TOOL\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '프레임워크', field: \"FRMW\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '라이브러리', field: \"LBRR\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '통신', field: \"CMNCT\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n      { headerName: '기타', field: \"ETC\", filter: \"agTextColumnFilter\", filterParams: textFilterParams},\r\n    ]);\r\n\r\n    const gridApi = shallowRef();\r\n    const defaultColDef = ref({\r\n      editable: true,\r\n      filter: true,\r\n      flex: 1,\r\n      headerClass: \"centered\", // 모든 열에 중앙 정렬 클래스 추가\r\n      headerStyle: \"headerColor\" // 배경색 설정\r\n    });\r\n    const rowSelection = ref(\"multiple\");\r\n    const rowData = ref([]);\r\n\r\n\r\n    const onGridReady = async (params) => {\r\n      gridApi.value = params.api; // api를 gridApi에 저장\r\n      // fetchData를 직접 호출하지 않고, 이벤트 등록만 수행\r\n      eventbus.SearchResultEvent.add('search', fetchData);\r\n    };\r\n\r\n    // 이벤트 등록\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/data');\r\n        const data = await response.json();\r\n\r\n        const translatedData = data.result.row.map(item => ({\r\n          DEV_NO: item.DEV_NO, // 개발자번호\r\n          NM: item.NM, // 이름\r\n          PJ_INP_STTS: item.PJ_INP_STTS, // 프로젝트투입상태\r\n          CTRT_NMTM: item.CTRT_NMTM, // 계약횟수\r\n          BRDT: item.BRDT, // 생년월일\r\n          GNDR: item.GNDR, // 성별\r\n          JBPS: item.JBPS, // 직위\r\n          GRD: item.GRD, // 등급\r\n          T_CR_PER: item.T_CR_PER, // 총경력기간\r\n          RGN: item.RGN, // 지역\r\n          MBL_TELNO: item.MBL_TELNO, // 휴대전화번호\r\n          EML: item.EML, // 이메일\r\n          CONTT_MTHD: item.CONTT_MTHD, // 컨택방법\r\n          NTRV_DMND_DT: item.NTRV_DMND_DT, // 인터뷰요청일\r\n          INP_PSBLTY_DT: item.INP_PSBLTY_DT, // 투입가능일\r\n          OGDP_CO: item.OGDP_CO, // 소속회사\r\n          SN: item.SN, // 일련번호\r\n          WHTAX_YN: item.WHTAX_YN, // 3.3%여부\r\n          BZMN_YN: item.BZMN_YN, // 사업자여부\r\n          KDS_EMP_YN: item.KDS_EMP_YN, // 자사정규직여부\r\n          CTRT_CO_EMP_YN: item.CTRT_CO_EMP_YN, // 계약회사정규직여부\r\n          CLCT_PICKUP_DT: item.CLCT_PICKUP_DT, // 대금수령날짜\r\n          GIVE_DT: item.GIVE_DT, // 지급일자\r\n          BANK: item.BANK, // 은행\r\n          ACTNO: item.ACTNO, // 계좌번호\r\n          DEPT: item.DEPT, // 부서\r\n          MM_DMND_UNTPRC: item.MM_DMND_UNTPRC, // 월요청단가\r\n          ADDR: item.ADDR, // 주소\r\n          JBTTL: item.JBTTL, // 직책\r\n          BRKR: item.BRKR, // 소개자\r\n          KAKAO_NICK: item.KAKAO_NICK, // 카카오톡닉네임\r\n          CTRT_HSTRY_YN: item.CTRT_HSTRY_YN, // 계약이력존재여부\r\n          MS: item.MS, // 병역\r\n          MDL: item.MDL, // 모델\r\n          OS: item.OS, // 운영 체제\r\n          LANG: item.LANG, // 언어\r\n          DB: item.DB, // 데이터베이스\r\n          TOOL: item.TOOL, // 툴\r\n          FRMW: item.FRMW, // 프레임워크\r\n          LBRR: item.LBRR, // 라이브러리\r\n          CMNCT: item.CMNCT, // 통신\r\n          ETC: item.ETC, // 기타\r\n          AGE: item.AGE, // 나이\r\n          ACBG: item.ACBG // 학력\r\n        }));\r\n        rowData.value = translatedData;\r\n        gridApi.value.refreshCells();\r\n      } catch (error) {\r\n        console.error('데이터 로드 오류:', error);\r\n        rowData.value = [];\r\n      }\r\n    };\r\n\r\n    eventbus.SearchResultEvent.add('search', fetchData);\r\n\r\n    // 셀의 값이 변경될 때 호출되는 함수\r\n    const onCellValueChanged = async (event) => {\r\n      console.log(event.data)\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/updateData', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(event.data),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to update data');\r\n        }\r\n\r\n        const result = await response.json();\r\n        console.log(result.message);\r\n      } catch (error) {\r\n        console.error('Error updating data:', error);\r\n      }\r\n    };\r\n\r\n    //--- 필터초기화 시작 ---//\r\n    const resetFilter = async () => {\r\n      gridApi.value.setColumnFilterModel({\r\n        NM: null,\r\n        PJ_INP_STTS: null,\r\n        CTRT_NMTM: null,\r\n        BRDT: null,\r\n        AGE: null,\r\n        ACBG: null,\r\n        GNDR: null,\r\n        JBPS: null,\r\n        GRD: null,\r\n        T_CR_PER: null,\r\n        RGN: null,\r\n        MBL_TELNO: null,\r\n        EML: null,\r\n        CONTT_MTHD: null,\r\n        NTRV_DMND_DT: null,\r\n        INP_PSBLTY_DT: null,\r\n        OGDP_CO: null,\r\n        SN: null,\r\n        WHTAX_YN: null,\r\n        BZMN_YN: null,\r\n        KDS_EMP_YN: null,\r\n        CTRT_CO_EMP_YN: null,\r\n        CLCT_PICKUP_DT: null,\r\n        GIVE_DT: null,\r\n        BANK: null,\r\n        ACTNO: null,\r\n        DEPT: null,\r\n        MM_DMND_UNTPRC: null,\r\n        ADDR: null,\r\n        JBTTL: null,\r\n        BRKR: null,\r\n        KAKAO_NICK: null,\r\n        CTRT_HSTRY_YN: null,\r\n        MS: null,\r\n        MDL: null,\r\n        OS: null,\r\n        LANG: null,\r\n        DB: null,\r\n        TOOL: null,\r\n        FRMW: null,\r\n        LBRR: null,\r\n        CMNCT: null,\r\n        ETC: null,\r\n      }).then(() => {\r\n        gridApi.value.onFilterChanged();\r\n      });\r\n    };\r\n\r\n    // 이벤트 등록\r\n    eventbus.SearchResultEvent.add('reset', resetFilter);\r\n    //--- 필터초기화 끝 ---//\r\n\r\n    return {\r\n      columnDefs,\r\n      gridApi,\r\n      defaultColDef,\r\n      rowSelection,\r\n      rowData,\r\n      gridOptions,\r\n      onGridReady,\r\n      onCellValueChanged,\r\n      deleteRowBtnClick,\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style>\r\n@import \"ag-grid-community/styles/ag-grid.css\";\r\n@import \"ag-grid-community/styles/ag-theme-quartz.css\";\r\n\r\n.centered {\r\n  .ag-header-cell-label {\r\n    justify-content: center !important;\r\n  }\r\n}\r\n\r\n.headerColor{\r\n  background-color: #e8e8e8 !important;;\r\n}\r\n.pl10{\r\n  padding-left: 10px;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC,oCAAoC;EAACC,KAAiC,EAAjC;IAAA;IAAA;EAAA;;;;uBAAhDC,mBAAA,CAYM,OAZNC,UAYM,GAXJC,YAAA,CAUEC,sBAAA;IATEJ,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAAkC;IACjCK,UAAU,EAAEC,IAAA,CAAAD,UAAU;IACtBE,WAAU,EAAED,IAAA,CAAAC,WAAW;IACvBC,aAAa,EAAEF,IAAA,CAAAE,aAAa;IAC5BC,YAAY,EAAEH,IAAA,CAAAG,YAAY;IAC1BC,OAAO,EAAEJ,IAAA,CAAAI,OAAO;IAChB,cAAY,EAAEJ,IAAA,CAAAK,WAAW;IACzBC,UAAU,EAAE,IAAI;IAChBC,kBAAkB,EAAEP,IAAA,CAAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}